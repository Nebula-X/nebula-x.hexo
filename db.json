{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/nebula-black.png","path":"img/signature/nebula-black.png","modified":1,"renderable":0},{"_id":"source/img/signature/nebula-white.png","path":"img/signature/nebula-white.png","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":1,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":1,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":1,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1541580566620},{"_id":"source/CNAME","hash":"c9e7a36a848473962a7689ab37caf5b9347af655","modified":1541671811512},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1541580566723},{"_id":"themes/beantech/_config.yml","hash":"f0796b8e85fe6b3154a5fa442420003fe18dff0a","modified":1541580566724},{"_id":"source/about/index.md","hash":"28611a9a0b9074734fce81b4f6669bf652a1b4c3","modified":1541726221596},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识.md","hash":"548033a77e893122ebf44d08f44375ce59295e23","modified":1542780967799},{"_id":"source/_posts/RabbitMQ学习-2-队列模型.md","hash":"7fe3250c6cb123a47088a9fc53200861dbca1620","modified":1543106057568},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"d7b8618bbd1a4897781c9a75309c02e097d4d74e","modified":1541807596362},{"_id":"source/_posts/基于Golang的gRPC使用笔记1.md","hash":"c2686645ab891e09e60d2651dca34e60d6be542e","modified":1542725365945},{"_id":"source/archive/index.md","hash":"971fdb6d0fc384fe1301dc82a68568d5ab29d332","modified":1541726039442},{"_id":"source/_posts/微服务API网关框架-1.md","hash":"de22a82ebe2867354847b3f813e219cfa04f1c5b","modified":1544246075101},{"_id":"source/_posts/微服务API网关框架-2.md","hash":"770f056a04aefaf2439cdaa0cdcb72f06e03d37a","modified":1544415884039},{"_id":"source/img/avatar.jpg","hash":"77c450e6ef9c5c243fdd212a87fedda945718382","modified":1541691053456},{"_id":"source/tags/index.md","hash":"d8fbfb47afcf8bbf75c4b1244d5727e20a01cd99","modified":1541726588994},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1541580566725},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1541580566711},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1541580566726},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1541580566726},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1541580566727},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1541580566728},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1541580566729},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1541580566730},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1541580566730},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1541580566731},{"_id":"themes/beantech/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1541580566732},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1541580566742},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1541580566742},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1541580566743},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1541580566744},{"_id":"themes/beantech/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1541580566745},{"_id":"themes/beantech/layout/page.ejs","hash":"b6d161e11168c73122cbf2a41b7307bef4ab5dbd","modified":1541692415317},{"_id":"themes/beantech/layout/post.ejs","hash":"8aef246a0a5c7bc24b47db836ec07b37bc6f5ad6","modified":1541692199751},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1541580566749},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权2.png","hash":"faac5113e412f275712979750ed753d42696373c","modified":1542780223246},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权后.png","hash":"de55545d7621d45a61471f09f163e1ca4cc1415f","modified":1542780247065},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/异步处理.png","hash":"666bb259fc180c35ce51e090d6dfabfbda5a08ef","modified":1542767722125},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/日志收集与处理.png","hash":"19aebd9fd04bb76cbd64edfd2a7b63c8426315cd","modified":1542766790132},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/秒杀抢购.png","hash":"1065b2ba7a9593c5879a2039b16fe157158d3455","modified":1542768240639},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/系统解耦.png","hash":"2c9ac9d22338ab6926704730cb28ed775b24b128","modified":1542767885748},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/工作队列.png","hash":"059875c4bc4e3e79bb873acfc4f7f222ad885898","modified":1543104666114},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/简单队列.png","hash":"be0611cd80bb4ca21b65f9c28edb329a18475ab0","modified":1542782248986},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC特点.png","hash":"1ff8aa50c81a7560bc3571af57848ec98d8e10f3","modified":1542004381200},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC调用示例.png","hash":"0bd9f2344416c46b2d99612d47db8aafd734c7fa","modified":1542004252689},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1541580566645},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/rpc原理图.png","hash":"04ccbcfe8ff0734f2175bcaf7bbd3a3889f14a49","modified":1542003658824},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-3.png","hash":"079fcc41a86126dd5ea8d611433ce591f913d651","modified":1544410592079},{"_id":"source/img/signature/nebula-black.png","hash":"faf235e18821463843caefc127c750a227b3ed69","modified":1541728036564},{"_id":"source/img/signature/nebula-white.png","hash":"a3c2e03ae0a23beb01a15f37424835c001d93cfd","modified":1541728030087},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1541580566751},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1541580566753},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1541580566752},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1541580566759},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1541580566760},{"_id":"themes/beantech/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1541580566764},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1541580566764},{"_id":"themes/beantech/source/css/toc.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1541580566765},{"_id":"themes/beantech/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1541580566766},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1541580566768},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1541580566771},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1541580566773},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1541580566775},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1541580566779},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1541580566780},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1541580566781},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1541580566788},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1541580566788},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1541580566789},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1541580566790},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"447d159e505f5dbd56b79f5994e038d46ddde509","modified":1541679641600},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"9aea336d3907735eedabcfb21c286cd54a01f45f","modified":1541580566734},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"258af22c0c8d5dce3f218f4cc8b2220f38a841b9","modified":1541580566734},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1541580566735},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1541580566736},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1541580566736},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1541580566737},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1541580566738},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1541580566739},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"db2471d05df2ad0b3ec882595550e68163ffbc45","modified":1541692507534},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"51543d9f7d41abdb4deff7ff949cd5ecad074853","modified":1541692709095},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"305bd9feaf2484052ba2925a13ebb8723a885396","modified":1541671090453},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"f3f4fd95fbb98090d6abd94b855d0a39c8bed9f5","modified":1541692753069},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权.png","hash":"64bc4522873a247c08fd4f8251ff2b39601675bf","modified":1542780193599},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host添加.png","hash":"6773b8d9e5de8d9de3cd509108ffd1e1ed888ee9","modified":1542780083770},{"_id":"source/_posts/微服务API网关框架-1/单节点场景网关.png","hash":"aace22510bf66be74488cbd53c0fc55ba66a0dbc","modified":1544165223471},{"_id":"source/_posts/微服务API网关框架-1/反向代理.png","hash":"505070cb7d764184993ddb9f5f22237feee0d366","modified":1544176907851},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-5.png","hash":"fdee0380216319c3e632d3d50219c948bb3b969b","modified":1544410952633},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-6.png","hash":"87783f108aa07d852c1a03b8da2c2d6b003635d2","modified":1544411889719},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-7.png","hash":"e9e3110ab137b86d60ea7e4879de365db247e380","modified":1544411944162},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-9.png","hash":"7e8a78f97dc16803ad4b18c82a420804ef4e4d56","modified":1544415360719},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-5.png","hash":"57f9851964521bceb995aa1776f3c1dc1a646430","modified":1544284996459},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-8.png","hash":"6df324505c33bc3ecf87de5c21142409f5fd30c9","modified":1544279301465},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1541580566658},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1541580566758},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1541580566770},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1541580566778},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1541580566787},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/vhost.png","hash":"b2cd3450e3df72495678acf9af9b994a5a461045","modified":1542779994853},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1541580566636},{"_id":"source/_posts/微服务API网关框架-1/多节点场景网关.png","hash":"3796d6200be78e6b133ec0b6161be559f5f12136","modified":1544165266969},{"_id":"source/_posts/微服务API网关框架-1/架构.png","hash":"5ede75fb54a0656e433a75874fbd863f496db8eb","modified":1544166518917},{"_id":"source/_posts/微服务API网关框架-1/架构2.png","hash":"af2ebcc3de50bfbbc99dd9ec1e580a795b7a3e17","modified":1544166572643},{"_id":"source/_posts/微服务API网关框架-1/架构3.png","hash":"793e70019e84c2773cf0e2cb9f4ad3db749d9f69","modified":1544166622304},{"_id":"source/_posts/微服务API网关框架-1/正向代理.png","hash":"cf2fd43df3865613c8fbb6b64641a6c2df3ab069","modified":1544176776480},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-2.png","hash":"d32cf6d088131c3cc0d35d9c84c2d8d23a29169c","modified":1544410476041},{"_id":"source/_posts/微服务API网关框架-2/基本配置.png","hash":"58470103e014685dd6d969d58fcf8f097b242e4f","modified":1544278557735},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1541580566656},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1541580566756},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1541580566762},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1541580566763},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/用户管理-添加用户.png","hash":"48bf176c95fcbf511b37eec2bc66382054a0a844","modified":1542779870912},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1541580566638},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-10.png","hash":"0fb9537e36aaf3424a5b337e26cf9014fa1c95c8","modified":1544415501679},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-8.png","hash":"593d62409e336d765f6af8ffd02db362cf2a575f","modified":1544414920180},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-2.png","hash":"b2000e2df991c6aafb61786613cfc822f065721d","modified":1544284334787},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-3.png","hash":"707f662e4295d0b5a27fa9313757244b25ddcf44","modified":1544284767946},{"_id":"source/_posts/微服务API网关框架-2/平滑升级.png","hash":"414965ef4f73497913b624afd40ec2f18e00c8a4","modified":1544276418219},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-5.png","hash":"dfd1e1a1091ebf9431e5b7d08f7d63415d794e15","modified":1544279077355},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1541580566710},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1541580566785},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-3.png","hash":"386bf23f51cc38693eee260b5ffd940a7f97cb01","modified":1544366688706},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-2.png","hash":"1ac6dd1d4e49aeb1585d0cf0897f2d0cb7994b1c","modified":1544366661897},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-1.png","hash":"a80eb82fc083085df0cf20760dd2d982c7f8d065","modified":1544284140701},{"_id":"source/_posts/微服务API网关框架-2/平滑升级2.png","hash":"22f72d286397b122eda49461e803444e8faf932f","modified":1544277238623},{"_id":"source/_posts/微服务API网关框架-2/平滑升级中途退出.png","hash":"3df3b317a8634b0fc839b57c223e90489cfa6fbb","modified":1544277083908},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-2.png","hash":"85908dfc1b975dc1b08536b4fc72e6bfc9680b9e","modified":1544278848236},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-7.png","hash":"83adc39b7d26071e2321bf03b9e745db5cef252f","modified":1544279265992},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-11.png","hash":"84fa05a72f385fb631094cd5c093a153c429810d","modified":1544415714780},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-1.png","hash":"eb93a9c09b84b4cd2e415c47b3abcec0c42f38d1","modified":1544365819990},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-4.png","hash":"33bdb964b349fa6d56bd55c845c58f84bf3a3a65","modified":1544284905068},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-3.png","hash":"d7ea191aadd835ea81187c5a00285861dac46722","modified":1544278901134},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-4.png","hash":"3c070a9db1cfea0ab2bc8eb5ddb48fa635a3a6cc","modified":1544278996941},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项.png","hash":"3d1f7998de8370e0b08384d8aa9d059be21af3da","modified":1544278617876},{"_id":"source/_posts/微服务API网关框架-1/新旧进程同在.png","hash":"d470602ee33a4515534404d0bbe2db93f8b6922a","modified":1544276814244},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-6.png","hash":"0793b9b7ff36c477e7a195d4fd1ead95dc801826","modified":1544279112806},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-1.png","hash":"331dd3adfd0a01382b5f356b8763253babae7b95","modified":1544410082423},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-4.png","hash":"006c8f27a02b437a3e9d8993f4316858df8c10c4","modified":1544410645907},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1541580566654},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1541580566707},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/微服务API网关框架-1/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/微服务API网关框架-2/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1541580566693},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1541580566682},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1541580566669},{"_id":"public/post-sitemap.xml","hash":"f4a66e0cd459a45f6f227b0f17849776b22e45a2","modified":1544420318628},{"_id":"public/page-sitemap.xml","hash":"c984a0a661bb4e2339dc75ddb2294a541ab9d3b6","modified":1544420318628},{"_id":"public/tag-sitemap.xml","hash":"0fa4d8fce41d14ce71cdc530fe88b24118fcee99","modified":1544420318786},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1544420318787},{"_id":"public/sitemap.xml","hash":"84d36ea7bd4d7dd3224a544130127beda1893b10","modified":1544420318864},{"_id":"public/404.html","hash":"9843beb95d08af009051b828cd0ed5f085b8fade","modified":1544420318871},{"_id":"public/tags/index.html","hash":"fac0d876b077241a1968ed27c540354e7fdbccc9","modified":1544420318871},{"_id":"public/2018/12/08/微服务API网关框架-2/index.html","hash":"4002d4716cfc5f85f591c30944964e9b65509d22","modified":1544420318871},{"_id":"public/2018/12/07/微服务API网关框架-1/index.html","hash":"97d97fd8e9ee274948589a89126c4dc8aaacdc31","modified":1544420318872},{"_id":"public/2018/11/21/RabbitMQ学习-2-队列模型/index.html","hash":"7e7158b1f2562d77ca0a4bb0c5d36502d80cd252","modified":1544420318872},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/index.html","hash":"abd42901f9e3d0aa2ded6f4ef2ff3dc95f36ea4c","modified":1544420318872},{"_id":"public/2018/11/12/基于Golang的gRPC使用笔记1/index.html","hash":"e03c6ddbbd169c132ce6cc6549022f9ba583392a","modified":1544420318872},{"_id":"public/2018/11/09/hexo-theme-beantech/index.html","hash":"a0fb7744eeca0ad479b0ac7b866f37dc1e255bf7","modified":1544420318872},{"_id":"public/about/index.html","hash":"aa93cccec36d5e08d7d7da567438feb1a78c304a","modified":1544420318872},{"_id":"public/archive/index.html","hash":"883cf9ac18eb0d3390836e06b580704562f6a084","modified":1544420318872},{"_id":"public/archives/index.html","hash":"922f2e23e5431be74a025ccfb5dde253ec122b76","modified":1544420318872},{"_id":"public/archives/2018/index.html","hash":"2064f7c8b5b17afee06617a245fcc46335eb34f9","modified":1544420318872},{"_id":"public/archives/2018/11/index.html","hash":"8b7e64c02bfdb1445b50f8a42b4f8cb8014c472f","modified":1544420318872},{"_id":"public/archives/2018/12/index.html","hash":"710679f6edbad5fefdaeb4174f28f9ff7b258921","modified":1544420318873},{"_id":"public/index.html","hash":"507f3761868a51a8779f6b596eb7806ae5baf18a","modified":1544420318873},{"_id":"public/tags/gRPC/index.html","hash":"d7291d6974c80415947321724ed52f629d02b2f2","modified":1544420318873},{"_id":"public/tags/golang/index.html","hash":"1ca977a0d222dda53b78a1d1921a0bc1ad3ccca1","modified":1544420318873},{"_id":"public/tags/RabbitMQ-消息队列/index.html","hash":"9e3402d85b0349702ce061682535c33eea0eb3fa","modified":1544420318873},{"_id":"public/tags/Hexo/index.html","hash":"05634ddce6e59562e4c1d532cffec88000f5c617","modified":1544420318873},{"_id":"public/tags/微服务API网关/index.html","hash":"91013d3a21cde499231134d224d0d6d5ed8a640a","modified":1544420318873},{"_id":"public/img/avatar.jpg","hash":"77c450e6ef9c5c243fdd212a87fedda945718382","modified":1544420318899},{"_id":"public/CNAME","hash":"c9e7a36a848473962a7689ab37caf5b9347af655","modified":1544420318899},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1544420318899},{"_id":"public/img/signature/nebula-black.png","hash":"faf235e18821463843caefc127c750a227b3ed69","modified":1544420318900},{"_id":"public/img/signature/nebula-white.png","hash":"a3c2e03ae0a23beb01a15f37424835c001d93cfd","modified":1544420318900},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1544420318900},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1544420318900},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1544420318900},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1544420318900},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1544420318900},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1544420318900},{"_id":"public/2018/11/21/RabbitMQ学习-2-队列模型/工作队列.png","hash":"059875c4bc4e3e79bb873acfc4f7f222ad885898","modified":1544420318900},{"_id":"public/2018/11/21/RabbitMQ学习-2-队列模型/简单队列.png","hash":"be0611cd80bb4ca21b65f9c28edb329a18475ab0","modified":1544420318900},{"_id":"public/2018/11/12/基于Golang的gRPC使用笔记1/gRPC特点.png","hash":"1ff8aa50c81a7560bc3571af57848ec98d8e10f3","modified":1544420318900},{"_id":"public/2018/11/12/基于Golang的gRPC使用笔记1/gRPC调用示例.png","hash":"0bd9f2344416c46b2d99612d47db8aafd734c7fa","modified":1544420318900},{"_id":"public/2018/11/12/基于Golang的gRPC使用笔记1/rpc原理图.png","hash":"04ccbcfe8ff0734f2175bcaf7bbd3a3889f14a49","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/v-host授权2.png","hash":"faac5113e412f275712979750ed753d42696373c","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/v-host授权后.png","hash":"de55545d7621d45a61471f09f163e1ca4cc1415f","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/异步处理.png","hash":"666bb259fc180c35ce51e090d6dfabfbda5a08ef","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/日志收集与处理.png","hash":"19aebd9fd04bb76cbd64edfd2a7b63c8426315cd","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/秒杀抢购.png","hash":"1065b2ba7a9593c5879a2039b16fe157158d3455","modified":1544420318901},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/系统解耦.png","hash":"2c9ac9d22338ab6926704730cb28ed775b24b128","modified":1544420318901},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-3.png","hash":"079fcc41a86126dd5ea8d611433ce591f913d651","modified":1544420318901},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1544420319167},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1544420319169},{"_id":"public/2018/12/07/微服务API网关框架-1/单节点场景网关.png","hash":"aace22510bf66be74488cbd53c0fc55ba66a0dbc","modified":1544420319172},{"_id":"public/2018/12/07/微服务API网关框架-1/反向代理.png","hash":"505070cb7d764184993ddb9f5f22237feee0d366","modified":1544420319172},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/v-host授权.png","hash":"64bc4522873a247c08fd4f8251ff2b39601675bf","modified":1544420319172},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/v-host添加.png","hash":"6773b8d9e5de8d9de3cd509108ffd1e1ed888ee9","modified":1544420319172},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-5.png","hash":"fdee0380216319c3e632d3d50219c948bb3b969b","modified":1544420319172},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-6.png","hash":"87783f108aa07d852c1a03b8da2c2d6b003635d2","modified":1544420319172},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-7.png","hash":"e9e3110ab137b86d60ea7e4879de365db247e380","modified":1544420319173},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-9.png","hash":"7e8a78f97dc16803ad4b18c82a420804ef4e4d56","modified":1544420319173},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx设置连接数-5.png","hash":"57f9851964521bceb995aa1776f3c1dc1a646430","modified":1544420319173},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-8.png","hash":"6df324505c33bc3ecf87de5c21142409f5fd30c9","modified":1544420319173},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1544420319184},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1544420319184},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1544420319184},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1544420319184},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1544420319184},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1544420319184},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1544420319184},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1544420319184},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1544420319184},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1544420319184},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1544420319184},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1544420319184},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1544420319184},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1544420319185},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1544420319185},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1544420319185},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1544420319185},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544420319185},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1544420319186},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1544420319186},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1544420319186},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1544420319187},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/vhost.png","hash":"b2cd3450e3df72495678acf9af9b994a5a461045","modified":1544420319187},{"_id":"public/2018/11/09/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1544420319187},{"_id":"public/2018/12/07/微服务API网关框架-1/架构.png","hash":"5ede75fb54a0656e433a75874fbd863f496db8eb","modified":1544420319187},{"_id":"public/2018/12/07/微服务API网关框架-1/多节点场景网关.png","hash":"3796d6200be78e6b133ec0b6161be559f5f12136","modified":1544420319187},{"_id":"public/2018/12/07/微服务API网关框架-1/架构3.png","hash":"793e70019e84c2773cf0e2cb9f4ad3db749d9f69","modified":1544420319187},{"_id":"public/2018/12/07/微服务API网关框架-1/架构2.png","hash":"af2ebcc3de50bfbbc99dd9ec1e580a795b7a3e17","modified":1544420319187},{"_id":"public/2018/12/07/微服务API网关框架-1/正向代理.png","hash":"cf2fd43df3865613c8fbb6b64641a6c2df3ab069","modified":1544420319187},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-2.png","hash":"d32cf6d088131c3cc0d35d9c84c2d8d23a29169c","modified":1544420319188},{"_id":"public/2018/12/08/微服务API网关框架-2/基本配置.png","hash":"58470103e014685dd6d969d58fcf8f097b242e4f","modified":1544420319188},{"_id":"public/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1544420319240},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/用户管理-添加用户.png","hash":"48bf176c95fcbf511b37eec2bc66382054a0a844","modified":1544420319240},{"_id":"public/2018/11/09/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1544420319241},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-10.png","hash":"0fb9537e36aaf3424a5b337e26cf9014fa1c95c8","modified":1544420319241},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-8.png","hash":"593d62409e336d765f6af8ffd02db362cf2a575f","modified":1544420319241},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx设置连接数-2.png","hash":"b2000e2df991c6aafb61786613cfc822f065721d","modified":1544420319241},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx设置连接数-3.png","hash":"707f662e4295d0b5a27fa9313757244b25ddcf44","modified":1544420319242},{"_id":"public/2018/12/08/微服务API网关框架-2/平滑升级.png","hash":"414965ef4f73497913b624afd40ec2f18e00c8a4","modified":1544420319242},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-5.png","hash":"dfd1e1a1091ebf9431e5b7d08f7d63415d794e15","modified":1544420319242},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1544420319249},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx虚拟主机-3.png","hash":"386bf23f51cc38693eee260b5ffd940a7f97cb01","modified":1544420319249},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx虚拟主机-2.png","hash":"1ac6dd1d4e49aeb1585d0cf0897f2d0cb7994b1c","modified":1544420319250},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx设置连接数-1.png","hash":"a80eb82fc083085df0cf20760dd2d982c7f8d065","modified":1544420319250},{"_id":"public/2018/12/08/微服务API网关框架-2/平滑升级2.png","hash":"22f72d286397b122eda49461e803444e8faf932f","modified":1544420319250},{"_id":"public/2018/12/08/微服务API网关框架-2/平滑升级中途退出.png","hash":"3df3b317a8634b0fc839b57c223e90489cfa6fbb","modified":1544420319251},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-2.png","hash":"85908dfc1b975dc1b08536b4fc72e6bfc9680b9e","modified":1544420319251},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-7.png","hash":"83adc39b7d26071e2321bf03b9e745db5cef252f","modified":1544420319251},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-11.png","hash":"84fa05a72f385fb631094cd5c093a153c429810d","modified":1544420319257},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx虚拟主机-1.png","hash":"eb93a9c09b84b4cd2e415c47b3abcec0c42f38d1","modified":1544420319257},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx设置连接数-4.png","hash":"33bdb964b349fa6d56bd55c845c58f84bf3a3a65","modified":1544420319258},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-3.png","hash":"d7ea191aadd835ea81187c5a00285861dac46722","modified":1544420319259},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-4.png","hash":"3c070a9db1cfea0ab2bc8eb5ddb48fa635a3a6cc","modified":1544420319259},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项.png","hash":"3d1f7998de8370e0b08384d8aa9d059be21af3da","modified":1544420319259},{"_id":"public/2018/12/07/微服务API网关框架-1/新旧进程同在.png","hash":"d470602ee33a4515534404d0bbe2db93f8b6922a","modified":1544420319266},{"_id":"public/2018/12/08/微服务API网关框架-2/配置文件的注意事项-6.png","hash":"0793b9b7ff36c477e7a195d4fd1ead95dc801826","modified":1544420319266},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-1.png","hash":"331dd3adfd0a01382b5f356b8763253babae7b95","modified":1544420319282},{"_id":"public/2018/12/08/微服务API网关框架-2/nginx日志以及切割-4.png","hash":"006c8f27a02b437a3e9d8993f4316858df8c10c4","modified":1544420319292},{"_id":"public/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1544420319358},{"_id":"public/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1544420319362},{"_id":"public/2018/11/09/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319374},{"_id":"public/2018/11/21/RabbitMQ学习-2-队列模型/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319374},{"_id":"public/2018/12/07/微服务API网关框架-1/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319375},{"_id":"public/2018/11/12/基于Golang的gRPC使用笔记1/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319379},{"_id":"public/2018/11/21/RabbitMQ学习-1-概念与认识/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319379},{"_id":"public/2018/12/08/微服务API网关框架-2/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1544420319381},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1544420319385},{"_id":"public/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1544420319387},{"_id":"public/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1544420319392}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-11-07T08:49:26.620Z","updated":"2018-11-07T08:49:26.620Z","path":"404.html","title":"","comments":1,"_id":"cjphvzado000080ujy0jhve79","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"关于我","date":"2018-11-08T16:00:00.000Z","description":"勿在浮沙筑高台，不为浮华易匠心","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于我\"\ndate: 2018-11-09 00:00:00\ndescription: \"勿在浮沙筑高台，不为浮华易匠心\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","updated":"2018-11-09T01:17:01.596Z","path":"about/index.html","_id":"cjphvzafo000280uj41gd51ng","content":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n"},{"layout":"archive","title":"归档","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"时光匆匆流逝，记录的却是简单的过去","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"归档\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"时光匆匆流逝，记录的却是简单的过去\"\n---\n","updated":"2018-11-09T01:13:59.442Z","path":"archive/index.html","_id":"cjphvzafr000480ujwcq5q1ru","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"书签","description":"嗯，分类是个好习惯","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"书签\"\ndescription: \"嗯，分类是个好习惯\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2018-11-09T01:23:09.047Z","updated":"2018-11-09T01:23:08.994Z","path":"tags/index.html","comments":1,"_id":"cjphvzafx000780ujifeewmkk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"gRPC使用 -- Golang版示例","catalog":true,"date":"2018-11-12T06:00:00.000Z","subtitle":null,"header-img":null,"catagories":["Hexo"],"_content":"# RPC入门\n\n## RPC框架原理\n```\n    RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式(TCP或者UDP),\n    序列化方式(XML/JSON/二进制)和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，\n    而不需要关心底层通信细节和调用过程.\n```\n![rpc原理图](rpc原理图.png)\n\n## gRPC\n\n### gRPC简介\n```\n    gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/2设计.\n```\n![gRPC调用示例](gRPC调用示例.png)\n\n### gRPC特点\n![gRPC特点](gRPC特点.png)\n\n### Golang gRPC 示例\n\n#### 1、安装gRPC runtime\n```\ngo get google.golang.org/grpc\n```\n\n#### 2、protocal buffer安装\n```\n从https://github.com/google/protobuf/releases下载安装包，\n例如：protobuf-cpp-3.0.0-beta-3.zip，解压后\n./configure\nmake && make install\n再添加环境变量：export LD_LIBRARY_PATH=/usr/local/lib，之后protoc命令即可运行    \n```\n\n#### 3、安装GoLang protoc 插件\n```\ngo get -a github.com/golang/protobuf/protoc-gen-go\n```\n\n#### 4、定义service\n一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：\n```\nsyntax = \"proto3\";\n \noption java_package = \"io.grpc.examples\";\n \npackage helloworld;\n \n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n \n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n \n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n#### 5.生成Golang通用代码\n```\n接着，根据上述定义的service，我们可以利用protocal buffer compiler ，\n即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。\n假设现在所在的目录是$GOPATH/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：\nprotoc -I ./ helloworld.proto --go_out=plugins=grpc:.\n```\n\n#### 6.生成相关的RPC的客户端和服务端\n在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现\n\n##### 服务端代码\n```\npackage main\n \n// server.go\n \nimport (\n    \"log\"\n    \"net\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    port = \":50051\"\n)\n \ntype server struct {}\n \nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n    return &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n \nfunc main() {\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatal(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGreeterServer(s, &server{})\n    s.Serve(lis)\n}\n```\n\n##### 客户端代码\n```\npackage main\n \n//client.go\n \nimport (\n    \"log\"\n    \"os\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    address     = \"localhost:50051\"\n    defaultName = \"world\"\n)\n \nfunc main() {\n    conn, err := grpc.Dial(address, grpc.WithInsecure())\n    if err != nil {\n        log.Fatal(\"did not connect: %v\", err)\n    }\n    defer conn.Close()\n    c := pb.NewGreeterClient(conn)\n \n    name := defaultName\n    if len(os.Args) >1 {\n        name = os.Args[1]\n    }\n    r, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n    if err != nil {\n        log.Fatal(\"could not greet: %v\", err)\n    }\n    log.Printf(\"Greeting: %s\", r.Message)\n}\n```\n这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下\n\n#### 7.运行示例\n```\ngo run server.go\ngo run client.go\n```\n","source":"_posts/基于Golang的gRPC使用笔记1.md","raw":"---\ntitle: gRPC使用 -- Golang版示例\ncatalog: true\ndate: 2018-11-12 14:00:00\nsubtitle:\nheader-img:\ntags:\n- gRPC\n- golang\ncatagories:\n- Hexo\n---\n# RPC入门\n\n## RPC框架原理\n```\n    RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式(TCP或者UDP),\n    序列化方式(XML/JSON/二进制)和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，\n    而不需要关心底层通信细节和调用过程.\n```\n![rpc原理图](rpc原理图.png)\n\n## gRPC\n\n### gRPC简介\n```\n    gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/2设计.\n```\n![gRPC调用示例](gRPC调用示例.png)\n\n### gRPC特点\n![gRPC特点](gRPC特点.png)\n\n### Golang gRPC 示例\n\n#### 1、安装gRPC runtime\n```\ngo get google.golang.org/grpc\n```\n\n#### 2、protocal buffer安装\n```\n从https://github.com/google/protobuf/releases下载安装包，\n例如：protobuf-cpp-3.0.0-beta-3.zip，解压后\n./configure\nmake && make install\n再添加环境变量：export LD_LIBRARY_PATH=/usr/local/lib，之后protoc命令即可运行    \n```\n\n#### 3、安装GoLang protoc 插件\n```\ngo get -a github.com/golang/protobuf/protoc-gen-go\n```\n\n#### 4、定义service\n一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：\n```\nsyntax = \"proto3\";\n \noption java_package = \"io.grpc.examples\";\n \npackage helloworld;\n \n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n \n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n \n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n#### 5.生成Golang通用代码\n```\n接着，根据上述定义的service，我们可以利用protocal buffer compiler ，\n即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。\n假设现在所在的目录是$GOPATH/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：\nprotoc -I ./ helloworld.proto --go_out=plugins=grpc:.\n```\n\n#### 6.生成相关的RPC的客户端和服务端\n在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现\n\n##### 服务端代码\n```\npackage main\n \n// server.go\n \nimport (\n    \"log\"\n    \"net\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    port = \":50051\"\n)\n \ntype server struct {}\n \nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n    return &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n \nfunc main() {\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatal(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGreeterServer(s, &server{})\n    s.Serve(lis)\n}\n```\n\n##### 客户端代码\n```\npackage main\n \n//client.go\n \nimport (\n    \"log\"\n    \"os\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    address     = \"localhost:50051\"\n    defaultName = \"world\"\n)\n \nfunc main() {\n    conn, err := grpc.Dial(address, grpc.WithInsecure())\n    if err != nil {\n        log.Fatal(\"did not connect: %v\", err)\n    }\n    defer conn.Close()\n    c := pb.NewGreeterClient(conn)\n \n    name := defaultName\n    if len(os.Args) >1 {\n        name = os.Args[1]\n    }\n    r, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n    if err != nil {\n        log.Fatal(\"could not greet: %v\", err)\n    }\n    log.Printf(\"Greeting: %s\", r.Message)\n}\n```\n这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下\n\n#### 7.运行示例\n```\ngo run server.go\ngo run client.go\n```\n","slug":"基于Golang的gRPC使用笔记1","published":1,"updated":"2018-11-20T14:49:25.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzafk000180uj6p0r6uak","content":"<h1><span id=\"rpc入门\">RPC入门</span></h1>\n<h2><span id=\"rpc框架原理\">RPC框架原理</span></h2>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式<span class=\"comment\">(TCP或者UDP)</span>,</span><br><span class=\"line\">序列化方式<span class=\"comment\">(XML/JSON/二进制)</span>和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，</span><br><span class=\"line\">而不需要关心底层通信细节和调用过程.</span><br></pre></td></tr></table></figure>\n<p><img src=\"rpc%E5%8E%9F%E7%90%86%E5%9B%BE.png\" alt=\"rpc原理图\"></p>\n<h2><span id=\"grpc\">gRPC</span></h2>\n<h3><span id=\"grpc简介\">gRPC简介</span></h3>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/<span class=\"number\">2</span>设计.</span><br></pre></td></tr></table></figure>\n<p><img src=\"gRPC%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.png\" alt=\"gRPC调用示例\"></p>\n<h3><span id=\"grpc特点\">gRPC特点</span></h3>\n<p><img src=\"gRPC%E7%89%B9%E7%82%B9.png\" alt=\"gRPC特点\"></p>\n<h3><span id=\"golang-grpc-示例\">Golang gRPC 示例</span></h3>\n<h4><span id=\"1-安装grpc-runtime\">1、安装gRPC runtime</span></h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get google<span class=\"selector-class\">.golang</span><span class=\"selector-class\">.org</span>/grpc</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-protocal-buffer安装\">2、protocal buffer安装</span></h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从https:<span class=\"comment\">//github.com/google/protobuf/releases下载安装包，</span></span><br><span class=\"line\">例如：protobuf-cpp<span class=\"number\">-3.0</span><span class=\"number\">.0</span>-<span class=\"built_in\">beta</span><span class=\"number\">-3.</span>zip，解压后</span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"built_in\">make</span> &amp;&amp; <span class=\"built_in\">make</span> install</span><br><span class=\"line\">再添加环境变量：export LD_LIBRARY_PATH=/usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">lib</span>，之后protoc命令即可运行</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3-安装golang-protoc-插件\">3、安装GoLang protoc 插件</span></h4>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">a</span> github.<span class=\"keyword\">com</span>/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"4-定义service\">4、定义service</span></h4>\n<p>一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：</p>\n<figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">option java_package = <span class=\"string\">\"io.grpc.examples\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"5生成golang通用代码\">5.生成Golang通用代码</span></h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着，根据上述定义的service，我们可以利用protocal buffer compiler ，</span><br><span class=\"line\">即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。</span><br><span class=\"line\">假设现在所在的目录是<span class=\"variable\">$GOPATH</span>/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：</span><br><span class=\"line\">protoc -I ./ helloworld.proto <span class=\"attribute\">--go_out</span>=plugins=grpc:.</span><br></pre></td></tr></table></figure>\n<h4><span id=\"6生成相关的rpc的客户端和服务端\">6.生成相关的RPC的客户端和服务端</span></h4>\n<p>在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现</p>\n<h5><span id=\"服务端代码\">服务端代码</span></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// server.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    port = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    lis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s := grpc.NewServer()</span><br><span class=\"line\">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">    s.Serve(lis)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"客户端代码\">客户端代码</span></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//client.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    address     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">    defaultName = <span class=\"string\">\"world\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    c := pb.NewGreeterClient(conn)</span><br><span class=\"line\"> </span><br><span class=\"line\">    name := defaultName</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        name = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，<br>\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下</p>\n<h4><span id=\"7运行示例\">7.运行示例</span></h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"keyword\">run</span><span class=\"bash\"> server.go</span></span><br><span class=\"line\"><span class=\"bash\">go run client.go</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>RPC入门</h1>\n<h2>RPC框架原理</h2>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式<span class=\"comment\">(TCP或者UDP)</span>,</span><br><span class=\"line\">序列化方式<span class=\"comment\">(XML/JSON/二进制)</span>和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，</span><br><span class=\"line\">而不需要关心底层通信细节和调用过程.</span><br></pre></td></tr></table></figure>\n<p><img src=\"rpc%E5%8E%9F%E7%90%86%E5%9B%BE.png\" alt=\"rpc原理图\"></p>\n<h2>gRPC</h2>\n<h3>gRPC简介</h3>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/<span class=\"number\">2</span>设计.</span><br></pre></td></tr></table></figure>\n<p><img src=\"gRPC%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.png\" alt=\"gRPC调用示例\"></p>\n<h3>gRPC特点</h3>\n<p><img src=\"gRPC%E7%89%B9%E7%82%B9.png\" alt=\"gRPC特点\"></p>\n<h3>Golang gRPC 示例</h3>\n<h4>1、安装gRPC runtime</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get google<span class=\"selector-class\">.golang</span><span class=\"selector-class\">.org</span>/grpc</span><br></pre></td></tr></table></figure>\n<h4>2、protocal buffer安装</h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从https:<span class=\"comment\">//github.com/google/protobuf/releases下载安装包，</span></span><br><span class=\"line\">例如：protobuf-cpp<span class=\"number\">-3.0</span><span class=\"number\">.0</span>-<span class=\"built_in\">beta</span><span class=\"number\">-3.</span>zip，解压后</span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"built_in\">make</span> &amp;&amp; <span class=\"built_in\">make</span> install</span><br><span class=\"line\">再添加环境变量：export LD_LIBRARY_PATH=/usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">lib</span>，之后protoc命令即可运行</span><br></pre></td></tr></table></figure>\n<h4>3、安装GoLang protoc 插件</h4>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">a</span> github.<span class=\"keyword\">com</span>/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4>4、定义service</h4>\n<p>一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：</p>\n<figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">option java_package = <span class=\"string\">\"io.grpc.examples\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>5.生成Golang通用代码</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着，根据上述定义的service，我们可以利用protocal buffer compiler ，</span><br><span class=\"line\">即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。</span><br><span class=\"line\">假设现在所在的目录是<span class=\"variable\">$GOPATH</span>/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：</span><br><span class=\"line\">protoc -I ./ helloworld.proto <span class=\"attribute\">--go_out</span>=plugins=grpc:.</span><br></pre></td></tr></table></figure>\n<h4>6.生成相关的RPC的客户端和服务端</h4>\n<p>在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现</p>\n<h5>服务端代码</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// server.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    port = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    lis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s := grpc.NewServer()</span><br><span class=\"line\">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">    s.Serve(lis)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5>客户端代码</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//client.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    address     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">    defaultName = <span class=\"string\">\"world\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    c := pb.NewGreeterClient(conn)</span><br><span class=\"line\"> </span><br><span class=\"line\">    name := defaultName</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        name = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，<br>\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下</p>\n<h4>7.运行示例</h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"keyword\">run</span><span class=\"bash\"> server.go</span></span><br><span class=\"line\"><span class=\"bash\">go run client.go</span></span><br></pre></td></tr></table></figure>\n"},{"title":"RabbitMQ学习(2)--队列模型","catalog":true,"date":"2018-11-21T06:11:54.000Z","subtitle":null,"header-img":"Demo.png","catagories":["RabbitMQ"],"_content":"\n# RabbitMQ学习(1)--队列模型\n\n## 概念\nRabbitMQ存在六种模型\n>1.简单队列\n>2.工作队列\n>3.发布订阅\n>4.路由\n>5.Topic\n>6.RPC\n\n## 模型\n### 简单队列\n![简单队列](简单队列.png)\n>模型解析\nP: 消息生产者\n红色方块集合: 消息队列\nC: 消息消费者\n\n#### Golang实现简单队列\n\n官方依赖库: go get github.com/streadway/amqp\n\n向队列发送消息具体流程\n>1.获取MQ的连接\n>2.创建频道,从连接中获取通道\n>3.创建队列声明\n>4.创建消息，并发送消息\n>5.关闭连接\n\n>具体代码:\n```\npackage main\nimport (\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\n// We also need an helper function to check the return value for each amqp call\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t// 连接到RabbitMQ Server\n\tconn, err := amqp.Dial(\"amqp://user_mmr:123456@localhost:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\t// 创建channel，channel为驻留程序\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to Open a channel\")\n\tdefer ch.Close()\n\t// 我们需要声明发送队列，那么我们可以发送消息到这个队列上\n\t// 队列的创建时幂等的，只有当不存在，才会创建队列，且队列名是唯一的\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\", // name\n\t\tfalse,   // durable\n\t\tfalse,   // delete when unused\n\t\tfalse,   // exclusive\n\t\tfalse,   // no-wait\n\t\tnil,     // arguments\n\t)\n\tfailOnError(err, \"Failed to declare a queue\")\n\tbody := \"Hello World222!\"\n\terr = ch.Publish(\n\t\t\"\",     // exchange\n\t\tq.Name, // routing key\n\t\tfalse,  // mandatory\n\t\tfalse,  // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n}\n```\n\n\n从队列接收消息具体流程\n>1.获取MQ的连接\n>2.创建频道,从连接中获取通道\n>3.定义队列的监听者\n>4.监听队列(开一个协程来监听处理)\n\n>具体代码:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\n// We also need an helper function to check the return value for each amqp call\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t}\n}\n\nfunc main() {\n\tconn, err := amqp.Dial(\"amqp://user_mmr:123456@localhost:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\", // name\n\t\tfalse,   // durable\n\t\tfalse,   // delete when usused\n\t\tfalse,   // exclusive\n\t\tfalse,   // no-wait\n\t\tnil,     // arguments\n\t)\n\tfailOnError(err, \"Failed to declare a queue\")\n\tmsgs, err := ch.Consume(\n\t\tq.Name, // queue\n\t\t\"\",     // consumer\n\t\ttrue,   // auto-ack\n\t\tfalse,  // exclusive\n\t\tfalse,  // no-local\n\t\tfalse,  // no-wait\n\t\tnil,    // args\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\tfmt.Println(\"aaaaaa\")\n\tforever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n#### 简单队列的不足\n耦合性高，生产者一一对应消费者(如果我想有多个消费者消费队列中的消息，这种情况就不行了)\n队列名变更，这个时候也得同时变更\n\n### 工作队列\n![工作队列](工作队列.png)\n\n####为什么会出现工作队列\nSimple 队列是一一对应的，而且我们实际开发，生产者发送消息是毫不费力的，而消费者一般是要跟业务相结合的，消费者接收到消息之后就需要处理，可能需要花费时间,即耗时操作，由于只有一个消费者，此时队列就会挤压了很多的消息等待处理，所以工作队列能够解决这个问题\n\n从上面的代码中可以发现,消费者1和消费者2处理的消息是一样的,\n消费者1: 偶数\n消费者2：奇数\n这个方式叫做轮训分发(round-robin),结果就是不管谁忙者谁清闲，都不会多给一个消息，消息任务总是你一个我一个\n\n\n\n\n\n\n\n","source":"_posts/RabbitMQ学习-2-队列模型.md","raw":"---\ntitle: \"RabbitMQ学习(2)--队列模型\"\ncatalog: true\ndate: 2018-11-21 14:11:54\nsubtitle: \nheader-img: \"Demo.png\"\ntags:\n- RabbitMQ 消息队列\ncatagories:\n- RabbitMQ\n---\n\n# RabbitMQ学习(1)--队列模型\n\n## 概念\nRabbitMQ存在六种模型\n>1.简单队列\n>2.工作队列\n>3.发布订阅\n>4.路由\n>5.Topic\n>6.RPC\n\n## 模型\n### 简单队列\n![简单队列](简单队列.png)\n>模型解析\nP: 消息生产者\n红色方块集合: 消息队列\nC: 消息消费者\n\n#### Golang实现简单队列\n\n官方依赖库: go get github.com/streadway/amqp\n\n向队列发送消息具体流程\n>1.获取MQ的连接\n>2.创建频道,从连接中获取通道\n>3.创建队列声明\n>4.创建消息，并发送消息\n>5.关闭连接\n\n>具体代码:\n```\npackage main\nimport (\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\n// We also need an helper function to check the return value for each amqp call\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t}\n}\n\nfunc main() {\n\t// 连接到RabbitMQ Server\n\tconn, err := amqp.Dial(\"amqp://user_mmr:123456@localhost:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\t// 创建channel，channel为驻留程序\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to Open a channel\")\n\tdefer ch.Close()\n\t// 我们需要声明发送队列，那么我们可以发送消息到这个队列上\n\t// 队列的创建时幂等的，只有当不存在，才会创建队列，且队列名是唯一的\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\", // name\n\t\tfalse,   // durable\n\t\tfalse,   // delete when unused\n\t\tfalse,   // exclusive\n\t\tfalse,   // no-wait\n\t\tnil,     // arguments\n\t)\n\tfailOnError(err, \"Failed to declare a queue\")\n\tbody := \"Hello World222!\"\n\terr = ch.Publish(\n\t\t\"\",     // exchange\n\t\tq.Name, // routing key\n\t\tfalse,  // mandatory\n\t\tfalse,  // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(body),\n\t\t})\n\tfailOnError(err, \"Failed to publish a message\")\n}\n```\n\n\n从队列接收消息具体流程\n>1.获取MQ的连接\n>2.创建频道,从连接中获取通道\n>3.定义队列的监听者\n>4.监听队列(开一个协程来监听处理)\n\n>具体代码:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\n// We also need an helper function to check the return value for each amqp call\nfunc failOnError(err error, msg string) {\n\tif err != nil {\n\t\tlog.Fatalf(\"%s: %s\", msg, err)\n\t}\n}\n\nfunc main() {\n\tconn, err := amqp.Dial(\"amqp://user_mmr:123456@localhost:5672/\")\n\tfailOnError(err, \"Failed to connect to RabbitMQ\")\n\tdefer conn.Close()\n\n\tch, err := conn.Channel()\n\tfailOnError(err, \"Failed to open a channel\")\n\tdefer ch.Close()\n\n\tq, err := ch.QueueDeclare(\n\t\t\"hello\", // name\n\t\tfalse,   // durable\n\t\tfalse,   // delete when usused\n\t\tfalse,   // exclusive\n\t\tfalse,   // no-wait\n\t\tnil,     // arguments\n\t)\n\tfailOnError(err, \"Failed to declare a queue\")\n\tmsgs, err := ch.Consume(\n\t\tq.Name, // queue\n\t\t\"\",     // consumer\n\t\ttrue,   // auto-ack\n\t\tfalse,  // exclusive\n\t\tfalse,  // no-local\n\t\tfalse,  // no-wait\n\t\tnil,    // args\n\t)\n\tfailOnError(err, \"Failed to register a consumer\")\n\tfmt.Println(\"aaaaaa\")\n\tforever := make(chan bool)\n\n\tgo func() {\n\t\tfor d := range msgs {\n\t\t\tlog.Printf(\"Received a message: %s\", d.Body)\n\t\t}\n\t}()\n\n\tlog.Printf(\" [*] Waiting for messages. To exit press CTRL+C\")\n\t<-forever\n}\n\n```\n\n#### 简单队列的不足\n耦合性高，生产者一一对应消费者(如果我想有多个消费者消费队列中的消息，这种情况就不行了)\n队列名变更，这个时候也得同时变更\n\n### 工作队列\n![工作队列](工作队列.png)\n\n####为什么会出现工作队列\nSimple 队列是一一对应的，而且我们实际开发，生产者发送消息是毫不费力的，而消费者一般是要跟业务相结合的，消费者接收到消息之后就需要处理，可能需要花费时间,即耗时操作，由于只有一个消费者，此时队列就会挤压了很多的消息等待处理，所以工作队列能够解决这个问题\n\n从上面的代码中可以发现,消费者1和消费者2处理的消息是一样的,\n消费者1: 偶数\n消费者2：奇数\n这个方式叫做轮训分发(round-robin),结果就是不管谁忙者谁清闲，都不会多给一个消息，消息任务总是你一个我一个\n\n\n\n\n\n\n\n","slug":"RabbitMQ学习-2-队列模型","published":1,"updated":"2018-11-25T00:34:17.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzafq000380ujwn43cpij","content":"<h1><span id=\"rabbitmq学习1队列模型\">RabbitMQ学习(1)–队列模型</span></h1>\n<h2><span id=\"概念\">概念</span></h2>\n<p>RabbitMQ存在六种模型</p>\n<blockquote>\n<p>1.简单队列<br>\n2.工作队列<br>\n3.发布订阅<br>\n4.路由<br>\n5.Topic<br>\n6.RPC</p>\n</blockquote>\n<h2><span id=\"模型\">模型</span></h2>\n<h3><span id=\"简单队列\">简单队列</span></h3>\n<p><img src=\"%E7%AE%80%E5%8D%95%E9%98%9F%E5%88%97.png\" alt=\"简单队列\"></p>\n<blockquote>\n<p>模型解析<br>\nP: 消息生产者<br>\n红色方块集合: 消息队列<br>\nC: 消息消费者</p>\n</blockquote>\n<h4><span id=\"golang实现简单队列\">Golang实现简单队列</span></h4>\n<p>官方依赖库: go get <a href=\"http://github.com/streadway/amqp\" target=\"_blank\" rel=\"noopener\">github.com/streadway/amqp</a></p>\n<p>向队列发送消息具体流程</p>\n<blockquote>\n<p>1.获取MQ的连接<br>\n2.创建频道,从连接中获取通道<br>\n3.创建队列声明<br>\n4.创建消息，并发送消息<br>\n5.关闭连接</p>\n</blockquote>\n<blockquote>\n<p>具体代码:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/streadway/amqp\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We also need an helper function to check the return value for each amqp call</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">failOnError</span><span class=\"params\">(err error, msg <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"%s: %s\"</span>, msg, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接到RabbitMQ Server</span></span><br><span class=\"line\">\tconn, err := amqp.Dial(<span class=\"string\">\"amqp://user_mmr:123456@localhost:5672/\"</span>)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to connect to RabbitMQ\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建channel，channel为驻留程序</span></span><br><span class=\"line\">\tch, err := conn.Channel()</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to Open a channel\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ch.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 我们需要声明发送队列，那么我们可以发送消息到这个队列上</span></span><br><span class=\"line\">\t<span class=\"comment\">// 队列的创建时幂等的，只有当不存在，才会创建队列，且队列名是唯一的</span></span><br><span class=\"line\">\tq, err := ch.QueueDeclare(</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello\"</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// delete when unused</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to declare a queue\"</span>)</span><br><span class=\"line\">\tbody := <span class=\"string\">\"Hello World222!\"</span></span><br><span class=\"line\">\terr = ch.Publish(</span><br><span class=\"line\">\t\t<span class=\"string\">\"\"</span>,     <span class=\"comment\">// exchange</span></span><br><span class=\"line\">\t\tq.Name, <span class=\"comment\">// routing key</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// mandatory</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// immediate</span></span><br><span class=\"line\">\t\tamqp.Publishing&#123;</span><br><span class=\"line\">\t\t\tContentType: <span class=\"string\">\"text/plain\"</span>,</span><br><span class=\"line\">\t\t\tBody:        []<span class=\"keyword\">byte</span>(body),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to publish a message\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从队列接收消息具体流程</p>\n<blockquote>\n<p>1.获取MQ的连接<br>\n2.创建频道,从连接中获取通道<br>\n3.定义队列的监听者<br>\n4.监听队列(开一个协程来监听处理)</p>\n</blockquote>\n<blockquote>\n<p>具体代码:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/streadway/amqp\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We also need an helper function to check the return value for each amqp call</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">failOnError</span><span class=\"params\">(err error, msg <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"%s: %s\"</span>, msg, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconn, err := amqp.Dial(<span class=\"string\">\"amqp://user_mmr:123456@localhost:5672/\"</span>)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to connect to RabbitMQ\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tch, err := conn.Channel()</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to open a channel\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ch.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tq, err := ch.QueueDeclare(</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello\"</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// delete when usused</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to declare a queue\"</span>)</span><br><span class=\"line\">\tmsgs, err := ch.Consume(</span><br><span class=\"line\">\t\tq.Name, <span class=\"comment\">// queue</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"\"</span>,     <span class=\"comment\">// consumer</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span>,   <span class=\"comment\">// auto-ack</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// no-local</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,    <span class=\"comment\">// args</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to register a consumer\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"aaaaaa\"</span>)</span><br><span class=\"line\">\tforever := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> d := <span class=\"keyword\">range</span> msgs &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Received a message: %s\"</span>, d.Body)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>)</span><br><span class=\"line\">\t&lt;-forever</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"简单队列的不足\">简单队列的不足</span></h4>\n<p>耦合性高，生产者一一对应消费者(如果我想有多个消费者消费队列中的消息，这种情况就不行了)<br>\n队列名变更，这个时候也得同时变更</p>\n<h3><span id=\"工作队列\">工作队列</span></h3>\n<p><img src=\"%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97.png\" alt=\"工作队列\"></p>\n<p>####为什么会出现工作队列<br>\nSimple 队列是一一对应的，而且我们实际开发，生产者发送消息是毫不费力的，而消费者一般是要跟业务相结合的，消费者接收到消息之后就需要处理，可能需要花费时间,即耗时操作，由于只有一个消费者，此时队列就会挤压了很多的消息等待处理，所以工作队列能够解决这个问题</p>\n<p>从上面的代码中可以发现,消费者1和消费者2处理的消息是一样的,<br>\n消费者1: 偶数<br>\n消费者2：奇数<br>\n这个方式叫做轮训分发(round-robin),结果就是不管谁忙者谁清闲，都不会多给一个消息，消息任务总是你一个我一个</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>RabbitMQ学习(1)–队列模型</h1>\n<h2>概念</h2>\n<p>RabbitMQ存在六种模型</p>\n<blockquote>\n<p>1.简单队列<br>\n2.工作队列<br>\n3.发布订阅<br>\n4.路由<br>\n5.Topic<br>\n6.RPC</p>\n</blockquote>\n<h2>模型</h2>\n<h3>简单队列</h3>\n<p><img src=\"%E7%AE%80%E5%8D%95%E9%98%9F%E5%88%97.png\" alt=\"简单队列\"></p>\n<blockquote>\n<p>模型解析<br>\nP: 消息生产者<br>\n红色方块集合: 消息队列<br>\nC: 消息消费者</p>\n</blockquote>\n<h4>Golang实现简单队列</h4>\n<p>官方依赖库: go get <a href=\"http://github.com/streadway/amqp\" target=\"_blank\" rel=\"noopener\">github.com/streadway/amqp</a></p>\n<p>向队列发送消息具体流程</p>\n<blockquote>\n<p>1.获取MQ的连接<br>\n2.创建频道,从连接中获取通道<br>\n3.创建队列声明<br>\n4.创建消息，并发送消息<br>\n5.关闭连接</p>\n</blockquote>\n<blockquote>\n<p>具体代码:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/streadway/amqp\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We also need an helper function to check the return value for each amqp call</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">failOnError</span><span class=\"params\">(err error, msg <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"%s: %s\"</span>, msg, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接到RabbitMQ Server</span></span><br><span class=\"line\">\tconn, err := amqp.Dial(<span class=\"string\">\"amqp://user_mmr:123456@localhost:5672/\"</span>)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to connect to RabbitMQ\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建channel，channel为驻留程序</span></span><br><span class=\"line\">\tch, err := conn.Channel()</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to Open a channel\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ch.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 我们需要声明发送队列，那么我们可以发送消息到这个队列上</span></span><br><span class=\"line\">\t<span class=\"comment\">// 队列的创建时幂等的，只有当不存在，才会创建队列，且队列名是唯一的</span></span><br><span class=\"line\">\tq, err := ch.QueueDeclare(</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello\"</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// delete when unused</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to declare a queue\"</span>)</span><br><span class=\"line\">\tbody := <span class=\"string\">\"Hello World222!\"</span></span><br><span class=\"line\">\terr = ch.Publish(</span><br><span class=\"line\">\t\t<span class=\"string\">\"\"</span>,     <span class=\"comment\">// exchange</span></span><br><span class=\"line\">\t\tq.Name, <span class=\"comment\">// routing key</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// mandatory</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// immediate</span></span><br><span class=\"line\">\t\tamqp.Publishing&#123;</span><br><span class=\"line\">\t\t\tContentType: <span class=\"string\">\"text/plain\"</span>,</span><br><span class=\"line\">\t\t\tBody:        []<span class=\"keyword\">byte</span>(body),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to publish a message\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从队列接收消息具体流程</p>\n<blockquote>\n<p>1.获取MQ的连接<br>\n2.创建频道,从连接中获取通道<br>\n3.定义队列的监听者<br>\n4.监听队列(开一个协程来监听处理)</p>\n</blockquote>\n<blockquote>\n<p>具体代码:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/streadway/amqp\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We also need an helper function to check the return value for each amqp call</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">failOnError</span><span class=\"params\">(err error, msg <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"%s: %s\"</span>, msg, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tconn, err := amqp.Dial(<span class=\"string\">\"amqp://user_mmr:123456@localhost:5672/\"</span>)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to connect to RabbitMQ\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tch, err := conn.Channel()</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to open a channel\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> ch.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tq, err := ch.QueueDeclare(</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello\"</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// delete when usused</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to declare a queue\"</span>)</span><br><span class=\"line\">\tmsgs, err := ch.Consume(</span><br><span class=\"line\">\t\tq.Name, <span class=\"comment\">// queue</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"\"</span>,     <span class=\"comment\">// consumer</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span>,   <span class=\"comment\">// auto-ack</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// no-local</span></span><br><span class=\"line\">\t\t<span class=\"literal\">false</span>,  <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">\t\t<span class=\"literal\">nil</span>,    <span class=\"comment\">// args</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfailOnError(err, <span class=\"string\">\"Failed to register a consumer\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"aaaaaa\"</span>)</span><br><span class=\"line\">\tforever := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> d := <span class=\"keyword\">range</span> msgs &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">\"Received a message: %s\"</span>, d.Body)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">\" [*] Waiting for messages. To exit press CTRL+C\"</span>)</span><br><span class=\"line\">\t&lt;-forever</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>简单队列的不足</h4>\n<p>耦合性高，生产者一一对应消费者(如果我想有多个消费者消费队列中的消息，这种情况就不行了)<br>\n队列名变更，这个时候也得同时变更</p>\n<h3>工作队列</h3>\n<p><img src=\"%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97.png\" alt=\"工作队列\"></p>\n<p>####为什么会出现工作队列<br>\nSimple 队列是一一对应的，而且我们实际开发，生产者发送消息是毫不费力的，而消费者一般是要跟业务相结合的，消费者接收到消息之后就需要处理，可能需要花费时间,即耗时操作，由于只有一个消费者，此时队列就会挤压了很多的消息等待处理，所以工作队列能够解决这个问题</p>\n<p>从上面的代码中可以发现,消费者1和消费者2处理的消息是一样的,<br>\n消费者1: 偶数<br>\n消费者2：奇数<br>\n这个方式叫做轮训分发(round-robin),结果就是不管谁忙者谁清闲，都不会多给一个消息，消息任务总是你一个我一个</p>\n"},{"title":"RabbitMQ学习(1)--概念与认识","catalog":true,"date":"2018-11-21T02:11:54.000Z","subtitle":null,"header-img":"Demo.png","catagories":["RabbitMQ"],"_content":"# RabbitMQ学习(1)--概念与认识\n\n## 消息队列\n\n### 解决了什么问题\n1.异步处理\n>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完\n\n![异步处理](异步处理.png)\n2.应用解耦\n>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通\n\n![系统解耦](系统解耦.png)\n3.流量削锋\n>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃\n\n![秒杀抢购](秒杀抢购.png)\n4.日志处理\n>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理\n\n>流计算：就是实时计算，生成显示数据\n离线计算：对数据进行持久化\n\n![日志收集与处理](日志收集与处理.png)\n\n5. 等等\n\n### RabbitMQ安装 (不做详细的介绍)\n>自行参考网址: https://www.cnblogs.com/zzpblogs/p/8168763.html\n\n### RabbitMQ的简单使用\n\n#### 用户管理\n1.添加用户\n![用户管理-添加用户](用户管理-添加用户.png)\n\n#### virtual hosts管理\nvirtual hosts 相当于mysql的db(即数据库)，一般以\"/\"开头\n创建完数据库后，就要对数据库进行授权，\n![vhost](vhost.png)\n![v-host授权](v-host授权.png)\n![v-host添加](v-host添加.png)\n![v-host授权2](v-host授权2.png)\n![v-host授权后](v-host授权后.png)\n","source":"_posts/RabbitMQ学习-1-概念与认识.md","raw":"---\ntitle: \"RabbitMQ学习(1)--概念与认识\"\ncatalog: true\ndate: 2018-11-21 10:11:54\nsubtitle: \nheader-img: \"Demo.png\"\ntags:\n- RabbitMQ 消息队列\ncatagories:\n- RabbitMQ\n---\n# RabbitMQ学习(1)--概念与认识\n\n## 消息队列\n\n### 解决了什么问题\n1.异步处理\n>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完\n\n![异步处理](异步处理.png)\n2.应用解耦\n>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通\n\n![系统解耦](系统解耦.png)\n3.流量削锋\n>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃\n\n![秒杀抢购](秒杀抢购.png)\n4.日志处理\n>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理\n\n>流计算：就是实时计算，生成显示数据\n离线计算：对数据进行持久化\n\n![日志收集与处理](日志收集与处理.png)\n\n5. 等等\n\n### RabbitMQ安装 (不做详细的介绍)\n>自行参考网址: https://www.cnblogs.com/zzpblogs/p/8168763.html\n\n### RabbitMQ的简单使用\n\n#### 用户管理\n1.添加用户\n![用户管理-添加用户](用户管理-添加用户.png)\n\n#### virtual hosts管理\nvirtual hosts 相当于mysql的db(即数据库)，一般以\"/\"开头\n创建完数据库后，就要对数据库进行授权，\n![vhost](vhost.png)\n![v-host授权](v-host授权.png)\n![v-host添加](v-host添加.png)\n![v-host授权2](v-host授权2.png)\n![v-host授权后](v-host授权后.png)\n","slug":"RabbitMQ学习-1-概念与认识","published":1,"updated":"2018-11-21T06:16:07.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzafv000680ujrgvui7ay","content":"<h1><span id=\"rabbitmq学习1概念与认识\">RabbitMQ学习(1)–概念与认识</span></h1>\n<h2><span id=\"消息队列\">消息队列</span></h2>\n<h3><span id=\"解决了什么问题\">解决了什么问题</span></h3>\n<p>1.异步处理</p>\n<blockquote>\n<p>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完</p>\n</blockquote>\n<p><img src=\"%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.png\" alt=\"异步处理\"><br>\n2.应用解耦</p>\n<blockquote>\n<p>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通</p>\n</blockquote>\n<p><img src=\"%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"系统解耦\"><br>\n3.流量削锋</p>\n<blockquote>\n<p>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃</p>\n</blockquote>\n<p><img src=\"%E7%A7%92%E6%9D%80%E6%8A%A2%E8%B4%AD.png\" alt=\"秒杀抢购\"><br>\n4.日志处理</p>\n<blockquote>\n<p>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理</p>\n</blockquote>\n<blockquote>\n<p>流计算：就是实时计算，生成显示数据<br>\n离线计算：对数据进行持久化</p>\n</blockquote>\n<p><img src=\"%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E4%B8%8E%E5%A4%84%E7%90%86.png\" alt=\"日志收集与处理\"></p>\n<ol start=\"5\">\n<li>等等</li>\n</ol>\n<h3><span id=\"rabbitmq安装-不做详细的介绍\">RabbitMQ安装 (不做详细的介绍)</span></h3>\n<blockquote>\n<p>自行参考网址: <a href=\"https://www.cnblogs.com/zzpblogs/p/8168763.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zzpblogs/p/8168763.html</a></p>\n</blockquote>\n<h3><span id=\"rabbitmq的简单使用\">RabbitMQ的简单使用</span></h3>\n<h4><span id=\"用户管理\">用户管理</span></h4>\n<p>1.添加用户<br>\n<img src=\"%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.png\" alt=\"用户管理-添加用户\"></p>\n<h4><span id=\"virtual-hosts管理\">virtual hosts管理</span></h4>\n<p>virtual hosts 相当于mysql的db(即数据库)，一般以&quot;/&quot;开头<br>\n创建完数据库后，就要对数据库进行授权，<br>\n<img src=\"vhost.png\" alt=\"vhost\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%83.png\" alt=\"v-host授权\"><br>\n<img src=\"v-host%E6%B7%BB%E5%8A%A0.png\" alt=\"v-host添加\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%832.png\" alt=\"v-host授权2\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%83%E5%90%8E.png\" alt=\"v-host授权后\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>RabbitMQ学习(1)–概念与认识</h1>\n<h2>消息队列</h2>\n<h3>解决了什么问题</h3>\n<p>1.异步处理</p>\n<blockquote>\n<p>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完</p>\n</blockquote>\n<p><img src=\"%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.png\" alt=\"异步处理\"><br>\n2.应用解耦</p>\n<blockquote>\n<p>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通</p>\n</blockquote>\n<p><img src=\"%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"系统解耦\"><br>\n3.流量削锋</p>\n<blockquote>\n<p>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃</p>\n</blockquote>\n<p><img src=\"%E7%A7%92%E6%9D%80%E6%8A%A2%E8%B4%AD.png\" alt=\"秒杀抢购\"><br>\n4.日志处理</p>\n<blockquote>\n<p>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理</p>\n</blockquote>\n<blockquote>\n<p>流计算：就是实时计算，生成显示数据<br>\n离线计算：对数据进行持久化</p>\n</blockquote>\n<p><img src=\"%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E4%B8%8E%E5%A4%84%E7%90%86.png\" alt=\"日志收集与处理\"></p>\n<ol start=\"5\">\n<li>等等</li>\n</ol>\n<h3>RabbitMQ安装 (不做详细的介绍)</h3>\n<blockquote>\n<p>自行参考网址: <a href=\"https://www.cnblogs.com/zzpblogs/p/8168763.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zzpblogs/p/8168763.html</a></p>\n</blockquote>\n<h3>RabbitMQ的简单使用</h3>\n<h4>用户管理</h4>\n<p>1.添加用户<br>\n<img src=\"%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.png\" alt=\"用户管理-添加用户\"></p>\n<h4>virtual hosts管理</h4>\n<p>virtual hosts 相当于mysql的db(即数据库)，一般以&quot;/&quot;开头<br>\n创建完数据库后，就要对数据库进行授权，<br>\n<img src=\"vhost.png\" alt=\"vhost\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%83.png\" alt=\"v-host授权\"><br>\n<img src=\"v-host%E6%B7%BB%E5%8A%A0.png\" alt=\"v-host添加\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%832.png\" alt=\"v-host授权2\"><br>\n<img src=\"v-host%E6%8E%88%E6%9D%83%E5%90%8E.png\" alt=\"v-host授权后\"></p>\n"},{"title":"[Hexo] 主题使用教程","catalog":true,"date":"2018-11-08T16:23:00.000Z","subtitle":"This is hexo theme Demo.","header-img":"Demo.png","catagories":["Hexo"],"_content":"> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-beantech.md","raw":"---\ntitle: \"[Hexo] 主题使用教程\"\ncatalog: true\ndate: 2018-11-09 00:23:00\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"Demo.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\n---\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-beantech","published":1,"updated":"2018-11-09T23:53:16.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzafy000880ujcd2njsvu","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"微服务API网关框架(2)--Nginx的使用","catalog":true,"date":"2018-12-08T05:13:15.000Z","subtitle":null,"header-img":"Demo.png","catagories":["微服务API网关"],"_content":"# Nginx\n\n## Nginx的命令\n\n### 启动\n    指令: nginx -c xxxxx[xxxxx为nginx的配置文件]\n\n### 重启\n    nginx -s reload\n\n### 停止\n    nginx -s stop\n    nginx -s quit\n \n    注意:quit是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求\n         stop是一个快速关闭，不管有没有正在处理的请求\n     \n### 重新打开日志\n    nginx -s reopen\n\n### nginx检查配置文件\n    检查配置文件是否正确\n    nginx -t \n    nginx -t -c xxxxx [这个指令是先检查，然后运行nginx服务]\n    \n## Nginx的信号启动\n    Nginx支持两种进程模型Single和Master-Worker\n    Single是单进程，一般不适用\n    Master-Worker是主进程和工作进程模型运行，主进程对工作进程管理\n    Nginx允许我们通过信号来控制主进程，用信号的方式可以达到不影响现有连接的目的\n\n### Nginx的信号类型\n    INT,TERM                    快速关闭信号\n    QUIT                        从容关闭信号\n    HUP                         从容重启信号，一般用于修改配置文件后，重启\n    USR1                        重读日志，一般用于日志的切割\n    USR2                        平滑升级信号\n    WINCH                       从容关闭旧进程\n        \n### Nginx具体语法\n    kill -信号量  nginx的主进程号\n    例如,\n    kill -INT 26661\n    kill -HUP 487\n    \n    (1)nginx停止\n       ps -ef | grep nginx 获得的进程号    \n    \n    第一种从容\"优雅\"停止\n    kill -QUIT master进程号\n    Nginx服务可以正常地处理完当前所有请求再停止服务\n    步骤：首先会先关闭监听端口，停止接收新的连接，然后把当前正在处理的连接全部处理完，最后在退出进程\n    \n    第二种快速停止\n    kill -TERM master进程号\n    kill -INT master进程号\n    快速停止服务时，worker进程与master进程在收到信号后会立即跳出循环，退出进程\n    \n    第三种强制停止\n    pkill -9 nginx\n    系统强杀nginx进程\n    \n    重启nginx\n    kill -HUP master进程号\n    \n## Nginx平滑升级\n![平滑升级](平滑升级.png) \n![平滑升级2](平滑升级2.png) \n![平滑升级中途退出](平滑升级中途退出.png) \n  \n## Nginx配置文件\n![基本配置](基本配置.png)    \n\n### 配置文件的注意事项 \n![配置文件的注意事项](配置文件的注意事项.png)    \n![配置文件的注意事项-2](配置文件的注意事项-2.png)    \n![配置文件的注意事项-3](配置文件的注意事项-3.png)    \n![配置文件的注意事项-4](配置文件的注意事项-4.png)    \n![配置文件的注意事项-5](配置文件的注意事项-5.png)    \n![配置文件的注意事项-6](配置文件的注意事项-6.png)    \n![配置文件的注意事项-7](配置文件的注意事项-7.png)    \n![配置文件的注意事项-8](配置文件的注意事项-8.png)    \n\n### Nginx的配置连接数\n![nginx设置连接数-1](nginx设置连接数-1.png) \n![nginx设置连接数-2](nginx设置连接数-2.png) \n![nginx设置连接数-3](nginx设置连接数-3.png) \n![nginx设置连接数-4](nginx设置连接数-4.png) \n![nginx设置连接数-5](nginx设置连接数-5.png) \n \n### Nginx虚拟主机\n![nginx设置连接数-1](nginx设置连接数-1.png)\n![nginx设置连接数-2](nginx设置连接数-2.png)\n![nginx设置连接数-3](nginx设置连接数-3.png)\n\n### Nginx日志以及切割\n![nginx日志以及切割-1](nginx日志以及切割-1.png)\n![nginx日志以及切割-2](nginx日志以及切割-2.png)\n![nginx日志以及切割-3](nginx日志以及切割-3.png)\n![nginx日志以及切割-4](nginx日志以及切割-4.png)\n![nginx日志以及切割-5](nginx日志以及切割-5.png)\n![nginx日志以及切割-6](nginx日志以及切割-6.png)\n![nginx日志以及切割-7](nginx日志以及切割-7.png)\n![nginx日志以及切割-8](nginx日志以及切割-8.png)\n![nginx日志以及切割-9](nginx日志以及切割-9.png)\n![nginx日志以及切割-10](nginx日志以及切割-10.png)\n![nginx日志以及切割-11](nginx日志以及切割-11.png)\n","source":"_posts/微服务API网关框架-2.md","raw":"---\ntitle: 微服务API网关框架(2)--Nginx的使用\ncatalog: true\ndate: 2018-12-08 13:13:15\nsubtitle:\nheader-img: \"Demo.png\"\ntags:\n- 微服务API网关\ncatagories:\n- 微服务API网关\n---\n# Nginx\n\n## Nginx的命令\n\n### 启动\n    指令: nginx -c xxxxx[xxxxx为nginx的配置文件]\n\n### 重启\n    nginx -s reload\n\n### 停止\n    nginx -s stop\n    nginx -s quit\n \n    注意:quit是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求\n         stop是一个快速关闭，不管有没有正在处理的请求\n     \n### 重新打开日志\n    nginx -s reopen\n\n### nginx检查配置文件\n    检查配置文件是否正确\n    nginx -t \n    nginx -t -c xxxxx [这个指令是先检查，然后运行nginx服务]\n    \n## Nginx的信号启动\n    Nginx支持两种进程模型Single和Master-Worker\n    Single是单进程，一般不适用\n    Master-Worker是主进程和工作进程模型运行，主进程对工作进程管理\n    Nginx允许我们通过信号来控制主进程，用信号的方式可以达到不影响现有连接的目的\n\n### Nginx的信号类型\n    INT,TERM                    快速关闭信号\n    QUIT                        从容关闭信号\n    HUP                         从容重启信号，一般用于修改配置文件后，重启\n    USR1                        重读日志，一般用于日志的切割\n    USR2                        平滑升级信号\n    WINCH                       从容关闭旧进程\n        \n### Nginx具体语法\n    kill -信号量  nginx的主进程号\n    例如,\n    kill -INT 26661\n    kill -HUP 487\n    \n    (1)nginx停止\n       ps -ef | grep nginx 获得的进程号    \n    \n    第一种从容\"优雅\"停止\n    kill -QUIT master进程号\n    Nginx服务可以正常地处理完当前所有请求再停止服务\n    步骤：首先会先关闭监听端口，停止接收新的连接，然后把当前正在处理的连接全部处理完，最后在退出进程\n    \n    第二种快速停止\n    kill -TERM master进程号\n    kill -INT master进程号\n    快速停止服务时，worker进程与master进程在收到信号后会立即跳出循环，退出进程\n    \n    第三种强制停止\n    pkill -9 nginx\n    系统强杀nginx进程\n    \n    重启nginx\n    kill -HUP master进程号\n    \n## Nginx平滑升级\n![平滑升级](平滑升级.png) \n![平滑升级2](平滑升级2.png) \n![平滑升级中途退出](平滑升级中途退出.png) \n  \n## Nginx配置文件\n![基本配置](基本配置.png)    \n\n### 配置文件的注意事项 \n![配置文件的注意事项](配置文件的注意事项.png)    \n![配置文件的注意事项-2](配置文件的注意事项-2.png)    \n![配置文件的注意事项-3](配置文件的注意事项-3.png)    \n![配置文件的注意事项-4](配置文件的注意事项-4.png)    \n![配置文件的注意事项-5](配置文件的注意事项-5.png)    \n![配置文件的注意事项-6](配置文件的注意事项-6.png)    \n![配置文件的注意事项-7](配置文件的注意事项-7.png)    \n![配置文件的注意事项-8](配置文件的注意事项-8.png)    \n\n### Nginx的配置连接数\n![nginx设置连接数-1](nginx设置连接数-1.png) \n![nginx设置连接数-2](nginx设置连接数-2.png) \n![nginx设置连接数-3](nginx设置连接数-3.png) \n![nginx设置连接数-4](nginx设置连接数-4.png) \n![nginx设置连接数-5](nginx设置连接数-5.png) \n \n### Nginx虚拟主机\n![nginx设置连接数-1](nginx设置连接数-1.png)\n![nginx设置连接数-2](nginx设置连接数-2.png)\n![nginx设置连接数-3](nginx设置连接数-3.png)\n\n### Nginx日志以及切割\n![nginx日志以及切割-1](nginx日志以及切割-1.png)\n![nginx日志以及切割-2](nginx日志以及切割-2.png)\n![nginx日志以及切割-3](nginx日志以及切割-3.png)\n![nginx日志以及切割-4](nginx日志以及切割-4.png)\n![nginx日志以及切割-5](nginx日志以及切割-5.png)\n![nginx日志以及切割-6](nginx日志以及切割-6.png)\n![nginx日志以及切割-7](nginx日志以及切割-7.png)\n![nginx日志以及切割-8](nginx日志以及切割-8.png)\n![nginx日志以及切割-9](nginx日志以及切割-9.png)\n![nginx日志以及切割-10](nginx日志以及切割-10.png)\n![nginx日志以及切割-11](nginx日志以及切割-11.png)\n","slug":"微服务API网关框架-2","published":1,"updated":"2018-12-10T04:24:44.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzag0000980uj8lm1mwtg","content":"<h1><span id=\"nginx\">Nginx</span></h1>\n<h2><span id=\"nginx的命令\">Nginx的命令</span></h2>\n<h3><span id=\"启动\">启动</span></h3>\n<pre><code>指令: nginx -c xxxxx[xxxxx为nginx的配置文件]\n</code></pre>\n<h3><span id=\"重启\">重启</span></h3>\n<pre><code>nginx -s reload\n</code></pre>\n<h3><span id=\"停止\">停止</span></h3>\n<pre><code>nginx -s stop\nnginx -s quit\n\n注意:quit是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求\n     stop是一个快速关闭，不管有没有正在处理的请求\n</code></pre>\n<h3><span id=\"重新打开日志\">重新打开日志</span></h3>\n<pre><code>nginx -s reopen\n</code></pre>\n<h3><span id=\"nginx检查配置文件\">nginx检查配置文件</span></h3>\n<pre><code>检查配置文件是否正确\nnginx -t \nnginx -t -c xxxxx [这个指令是先检查，然后运行nginx服务]\n</code></pre>\n<h2><span id=\"nginx的信号启动\">Nginx的信号启动</span></h2>\n<pre><code>Nginx支持两种进程模型Single和Master-Worker\nSingle是单进程，一般不适用\nMaster-Worker是主进程和工作进程模型运行，主进程对工作进程管理\nNginx允许我们通过信号来控制主进程，用信号的方式可以达到不影响现有连接的目的\n</code></pre>\n<h3><span id=\"nginx的信号类型\">Nginx的信号类型</span></h3>\n<pre><code>INT,TERM                    快速关闭信号\nQUIT                        从容关闭信号\nHUP                         从容重启信号，一般用于修改配置文件后，重启\nUSR1                        重读日志，一般用于日志的切割\nUSR2                        平滑升级信号\nWINCH                       从容关闭旧进程\n</code></pre>\n<h3><span id=\"nginx具体语法\">Nginx具体语法</span></h3>\n<pre><code>kill -信号量  nginx的主进程号\n例如,\nkill -INT 26661\nkill -HUP 487\n\n(1)nginx停止\n   ps -ef | grep nginx 获得的进程号    \n\n第一种从容&quot;优雅&quot;停止\nkill -QUIT master进程号\nNginx服务可以正常地处理完当前所有请求再停止服务\n步骤：首先会先关闭监听端口，停止接收新的连接，然后把当前正在处理的连接全部处理完，最后在退出进程\n\n第二种快速停止\nkill -TERM master进程号\nkill -INT master进程号\n快速停止服务时，worker进程与master进程在收到信号后会立即跳出循环，退出进程\n\n第三种强制停止\npkill -9 nginx\n系统强杀nginx进程\n\n重启nginx\nkill -HUP master进程号\n</code></pre>\n<h2><span id=\"nginx平滑升级\">Nginx平滑升级</span></h2>\n<p><img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7.png\" alt=\"平滑升级\"><br>\n<img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A72.png\" alt=\"平滑升级2\"><br>\n<img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E4%B8%AD%E9%80%94%E9%80%80%E5%87%BA.png\" alt=\"平滑升级中途退出\"></p>\n<h2><span id=\"nginx配置文件\">Nginx配置文件</span></h2>\n<p><img src=\"%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.png\" alt=\"基本配置\"></p>\n<h3><span id=\"配置文件的注意事项\">配置文件的注意事项</span></h3>\n<p><img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png\" alt=\"配置文件的注意事项\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2.png\" alt=\"配置文件的注意事项-2\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-3.png\" alt=\"配置文件的注意事项-3\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-4.png\" alt=\"配置文件的注意事项-4\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-5.png\" alt=\"配置文件的注意事项-5\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-6.png\" alt=\"配置文件的注意事项-6\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-7.png\" alt=\"配置文件的注意事项-7\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-8.png\" alt=\"配置文件的注意事项-8\"></p>\n<h3><span id=\"nginx的配置连接数\">Nginx的配置连接数</span></h3>\n<p><img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-1.png\" alt=\"nginx设置连接数-1\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-2.png\" alt=\"nginx设置连接数-2\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-3.png\" alt=\"nginx设置连接数-3\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-4.png\" alt=\"nginx设置连接数-4\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-5.png\" alt=\"nginx设置连接数-5\"></p>\n<h3><span id=\"nginx虚拟主机\">Nginx虚拟主机</span></h3>\n<p><img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-1.png\" alt=\"nginx设置连接数-1\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-2.png\" alt=\"nginx设置连接数-2\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-3.png\" alt=\"nginx设置连接数-3\"></p>\n<h3><span id=\"nginx日志以及切割\">Nginx日志以及切割</span></h3>\n<p><img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-1.png\" alt=\"nginx日志以及切割-1\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-2.png\" alt=\"nginx日志以及切割-2\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-3.png\" alt=\"nginx日志以及切割-3\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-4.png\" alt=\"nginx日志以及切割-4\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-5.png\" alt=\"nginx日志以及切割-5\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-6.png\" alt=\"nginx日志以及切割-6\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-7.png\" alt=\"nginx日志以及切割-7\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-8.png\" alt=\"nginx日志以及切割-8\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-9.png\" alt=\"nginx日志以及切割-9\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-10.png\" alt=\"nginx日志以及切割-10\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-11.png\" alt=\"nginx日志以及切割-11\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Nginx</h1>\n<h2>Nginx的命令</h2>\n<h3>启动</h3>\n<pre><code>指令: nginx -c xxxxx[xxxxx为nginx的配置文件]\n</code></pre>\n<h3>重启</h3>\n<pre><code>nginx -s reload\n</code></pre>\n<h3>停止</h3>\n<pre><code>nginx -s stop\nnginx -s quit\n\n注意:quit是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求\n     stop是一个快速关闭，不管有没有正在处理的请求\n</code></pre>\n<h3>重新打开日志</h3>\n<pre><code>nginx -s reopen\n</code></pre>\n<h3>nginx检查配置文件</h3>\n<pre><code>检查配置文件是否正确\nnginx -t \nnginx -t -c xxxxx [这个指令是先检查，然后运行nginx服务]\n</code></pre>\n<h2>Nginx的信号启动</h2>\n<pre><code>Nginx支持两种进程模型Single和Master-Worker\nSingle是单进程，一般不适用\nMaster-Worker是主进程和工作进程模型运行，主进程对工作进程管理\nNginx允许我们通过信号来控制主进程，用信号的方式可以达到不影响现有连接的目的\n</code></pre>\n<h3>Nginx的信号类型</h3>\n<pre><code>INT,TERM                    快速关闭信号\nQUIT                        从容关闭信号\nHUP                         从容重启信号，一般用于修改配置文件后，重启\nUSR1                        重读日志，一般用于日志的切割\nUSR2                        平滑升级信号\nWINCH                       从容关闭旧进程\n</code></pre>\n<h3>Nginx具体语法</h3>\n<pre><code>kill -信号量  nginx的主进程号\n例如,\nkill -INT 26661\nkill -HUP 487\n\n(1)nginx停止\n   ps -ef | grep nginx 获得的进程号    \n\n第一种从容&quot;优雅&quot;停止\nkill -QUIT master进程号\nNginx服务可以正常地处理完当前所有请求再停止服务\n步骤：首先会先关闭监听端口，停止接收新的连接，然后把当前正在处理的连接全部处理完，最后在退出进程\n\n第二种快速停止\nkill -TERM master进程号\nkill -INT master进程号\n快速停止服务时，worker进程与master进程在收到信号后会立即跳出循环，退出进程\n\n第三种强制停止\npkill -9 nginx\n系统强杀nginx进程\n\n重启nginx\nkill -HUP master进程号\n</code></pre>\n<h2>Nginx平滑升级</h2>\n<p><img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7.png\" alt=\"平滑升级\"><br>\n<img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A72.png\" alt=\"平滑升级2\"><br>\n<img src=\"%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E4%B8%AD%E9%80%94%E9%80%80%E5%87%BA.png\" alt=\"平滑升级中途退出\"></p>\n<h2>Nginx配置文件</h2>\n<p><img src=\"%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.png\" alt=\"基本配置\"></p>\n<h3>配置文件的注意事项</h3>\n<p><img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png\" alt=\"配置文件的注意事项\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2.png\" alt=\"配置文件的注意事项-2\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-3.png\" alt=\"配置文件的注意事项-3\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-4.png\" alt=\"配置文件的注意事项-4\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-5.png\" alt=\"配置文件的注意事项-5\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-6.png\" alt=\"配置文件的注意事项-6\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-7.png\" alt=\"配置文件的注意事项-7\"><br>\n<img src=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-8.png\" alt=\"配置文件的注意事项-8\"></p>\n<h3>Nginx的配置连接数</h3>\n<p><img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-1.png\" alt=\"nginx设置连接数-1\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-2.png\" alt=\"nginx设置连接数-2\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-3.png\" alt=\"nginx设置连接数-3\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-4.png\" alt=\"nginx设置连接数-4\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-5.png\" alt=\"nginx设置连接数-5\"></p>\n<h3>Nginx虚拟主机</h3>\n<p><img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-1.png\" alt=\"nginx设置连接数-1\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-2.png\" alt=\"nginx设置连接数-2\"><br>\n<img src=\"nginx%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E6%95%B0-3.png\" alt=\"nginx设置连接数-3\"></p>\n<h3>Nginx日志以及切割</h3>\n<p><img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-1.png\" alt=\"nginx日志以及切割-1\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-2.png\" alt=\"nginx日志以及切割-2\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-3.png\" alt=\"nginx日志以及切割-3\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-4.png\" alt=\"nginx日志以及切割-4\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-5.png\" alt=\"nginx日志以及切割-5\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-6.png\" alt=\"nginx日志以及切割-6\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-7.png\" alt=\"nginx日志以及切割-7\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-8.png\" alt=\"nginx日志以及切割-8\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-9.png\" alt=\"nginx日志以及切割-9\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-10.png\" alt=\"nginx日志以及切割-10\"><br>\n<img src=\"nginx%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E5%88%87%E5%89%B2-11.png\" alt=\"nginx日志以及切割-11\"></p>\n"},{"title":"微服务API网关框架(1)--介绍","catalog":true,"date":"2018-12-07T06:27:21.000Z","subtitle":null,"header-img":"Demo.png","catagories":["微服务API网关"],"_content":"\n# 概念介绍\n    \n### 网关作用\n    统一入口\n    安全：黑名单、权限身份认证\n    限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n    缓存：数据缓存\n    日志：日志记录\n    监控：记录请求响应数据，api耗时分析，性能监控\n    重试：异常重试\n    熔断：降级 (防止服务雪崩)\n    \n### API网关\n    API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。\n    API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。\n\n### API网关种类\n1. 单节点网关\n![单节点场景网关](单节点场景网关.png)\n2.多节点网关\n![多节点场景网关](多节点场景网关.png)\n\n#### API网关网关的价值\n    网关层对外部和内部进行了隔离，保障了后台服务的安全性。 \n    对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本 \n    减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射。 \n    通过网关层聚合，减少外部访问的频次，提升访问效率。 \n    节约后端服务开发成本，减少上线风险。 \n    为服务熔断，灰度发布，线上测试提供简单方案。\n\n## 开源微服务项目\n    Dubbo\n    Spring Cloud\n    \n## 开源网关项目\n    Tyk：Tyk是一个开放源码的API网关，它是快速、可扩展和现代的。Tyk提供了一个API管理平台，其中包括API网关、API分析、开发人员门户和API管理面板。Try 是一个基于Go实现的网关服务。\n    Kong：Kong是一个可扩展的开放源码API Layer(也称为API网关或API中间件)。Kong 在任何RESTful API的前面运行，通过插件扩展，它提供了超越核心平台的额外功能和服务。\n    Orange：和Kong类似也是基于OpenResty的一个API网关程序，是由国人开发的。\n    Netflix zuul：Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。\n    apiaxle: Nodejs 实现的一个 API 网关。\n    api-umbrella: Ruby 实现的一个 API 网关。\n\n## 网关技术选型\n    kong \n        包含功能\n        (\n            统一入口\n            安全：黑名单、权限身份认证\n            限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n            缓存：数据缓存\n            日志：日志记录\n            监控：记录请求响应数据，api耗时分析，性能监控\n        )\n    Zuul\n        包含功能\n        (\n            重试\n            熔断\n        )\n        \n    kong 是基于Nginx + Lua模式开发出来的，我们将要自己搭建一个属于自己的网关，所以采用Nginx + Lua，真实部署的时候可以\n    采用kong+zuul的模式进行实际部署，因为自己搭建的需要考虑的问题有很多，当然自己构建的话，灵活性和个性化设置也是可以控制的，\n    这个需要看看团队的实际需要，客观进行评估.\n       \n### 架构实现图\n![架构](架构.png)\n![架构2](架构2.png)\n![架构3](架构3.png)\n\n### 项目运行环境\n    CentOS\n\n### Nginx安装\n    请自行搜索教程安装\n\n## 代理\n\n### 正向代理\n    用户要访问服务器C，但因为网络原因无法访问，但是服务器A可以访问服务器C，这样可以把服务器A设置为正向代理服务器\n    由服务器A去请求服务器C，然后服务器A把数据返回给客户\n![正向代理](正向代理.png)\n\n### 反向代理\n    用户需要访问一些服务器应用，但对方不想把服务器应用地址暴露给用户，这样可以确保安全。那客户如果访问，可以通过反向代理\n    服务器，用户只需要知道反向代理服务器地址就可以了，最后反向代理服务器去访问服务器的应用\n![反向代理](反向代理.png)    \n\n### 总结: 正向代理与反向代理的区别\n    (1)正向代理是需要在用户的电脑上，配置正向服务代理器的；而反向代理则不需要，因为用户是直接访问反向代理器的\n    (2)正向代理的应用场景是用户是知道目标服务器地址，如:http://www.baidu.com,但是不能直接的访问，那么就需要在电脑配置一个正向\n    代理服务器，用户再次访问的地址就是www.google.com\n      而反向代理的应用场景是，用户本来就是不知道目标服务器的地址，而是由平台方提供一个反向代理服务器的地址，用户直接访问反向代理服务器的地址就行了，www.a.com\n      不管目标服务器有多少，用户是不需要关心的，只要访问反向代理服务器就OK，由反向代理服务器去解析访问目标服务器\n    (3)反向代理，极大的保护了应用的安全性，而且此结构能够很好的搭建负载均衡  \n\n","source":"_posts/微服务API网关框架-1.md","raw":"---\ntitle: 微服务API网关框架(1)--介绍\ncatalog: true\ndate: 2018-12-07 14:27:21\nsubtitle:\nheader-img: \"Demo.png\"\ntags:\n- 微服务API网关\ncatagories:\n- 微服务API网关\n---\n\n# 概念介绍\n    \n### 网关作用\n    统一入口\n    安全：黑名单、权限身份认证\n    限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n    缓存：数据缓存\n    日志：日志记录\n    监控：记录请求响应数据，api耗时分析，性能监控\n    重试：异常重试\n    熔断：降级 (防止服务雪崩)\n    \n### API网关\n    API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。\n    API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。\n\n### API网关种类\n1. 单节点网关\n![单节点场景网关](单节点场景网关.png)\n2.多节点网关\n![多节点场景网关](多节点场景网关.png)\n\n#### API网关网关的价值\n    网关层对外部和内部进行了隔离，保障了后台服务的安全性。 \n    对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本 \n    减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射。 \n    通过网关层聚合，减少外部访问的频次，提升访问效率。 \n    节约后端服务开发成本，减少上线风险。 \n    为服务熔断，灰度发布，线上测试提供简单方案。\n\n## 开源微服务项目\n    Dubbo\n    Spring Cloud\n    \n## 开源网关项目\n    Tyk：Tyk是一个开放源码的API网关，它是快速、可扩展和现代的。Tyk提供了一个API管理平台，其中包括API网关、API分析、开发人员门户和API管理面板。Try 是一个基于Go实现的网关服务。\n    Kong：Kong是一个可扩展的开放源码API Layer(也称为API网关或API中间件)。Kong 在任何RESTful API的前面运行，通过插件扩展，它提供了超越核心平台的额外功能和服务。\n    Orange：和Kong类似也是基于OpenResty的一个API网关程序，是由国人开发的。\n    Netflix zuul：Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。\n    apiaxle: Nodejs 实现的一个 API 网关。\n    api-umbrella: Ruby 实现的一个 API 网关。\n\n## 网关技术选型\n    kong \n        包含功能\n        (\n            统一入口\n            安全：黑名单、权限身份认证\n            限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n            缓存：数据缓存\n            日志：日志记录\n            监控：记录请求响应数据，api耗时分析，性能监控\n        )\n    Zuul\n        包含功能\n        (\n            重试\n            熔断\n        )\n        \n    kong 是基于Nginx + Lua模式开发出来的，我们将要自己搭建一个属于自己的网关，所以采用Nginx + Lua，真实部署的时候可以\n    采用kong+zuul的模式进行实际部署，因为自己搭建的需要考虑的问题有很多，当然自己构建的话，灵活性和个性化设置也是可以控制的，\n    这个需要看看团队的实际需要，客观进行评估.\n       \n### 架构实现图\n![架构](架构.png)\n![架构2](架构2.png)\n![架构3](架构3.png)\n\n### 项目运行环境\n    CentOS\n\n### Nginx安装\n    请自行搜索教程安装\n\n## 代理\n\n### 正向代理\n    用户要访问服务器C，但因为网络原因无法访问，但是服务器A可以访问服务器C，这样可以把服务器A设置为正向代理服务器\n    由服务器A去请求服务器C，然后服务器A把数据返回给客户\n![正向代理](正向代理.png)\n\n### 反向代理\n    用户需要访问一些服务器应用，但对方不想把服务器应用地址暴露给用户，这样可以确保安全。那客户如果访问，可以通过反向代理\n    服务器，用户只需要知道反向代理服务器地址就可以了，最后反向代理服务器去访问服务器的应用\n![反向代理](反向代理.png)    \n\n### 总结: 正向代理与反向代理的区别\n    (1)正向代理是需要在用户的电脑上，配置正向服务代理器的；而反向代理则不需要，因为用户是直接访问反向代理器的\n    (2)正向代理的应用场景是用户是知道目标服务器地址，如:http://www.baidu.com,但是不能直接的访问，那么就需要在电脑配置一个正向\n    代理服务器，用户再次访问的地址就是www.google.com\n      而反向代理的应用场景是，用户本来就是不知道目标服务器的地址，而是由平台方提供一个反向代理服务器的地址，用户直接访问反向代理服务器的地址就行了，www.a.com\n      不管目标服务器有多少，用户是不需要关心的，只要访问反向代理服务器就OK，由反向代理服务器去解析访问目标服务器\n    (3)反向代理，极大的保护了应用的安全性，而且此结构能够很好的搭建负载均衡  \n\n","slug":"微服务API网关框架-1","published":1,"updated":"2018-12-08T05:14:35.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjphvzag6000b80ujqpbihblq","content":"<h1><span id=\"概念介绍\">概念介绍</span></h1>\n<h3><span id=\"网关作用\">网关作用</span></h3>\n<pre><code>统一入口\n安全：黑名单、权限身份认证\n限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n缓存：数据缓存\n日志：日志记录\n监控：记录请求响应数据，api耗时分析，性能监控\n重试：异常重试\n熔断：降级 (防止服务雪崩)\n</code></pre>\n<h3><span id=\"api网关\">API网关</span></h3>\n<pre><code>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。\nAPI网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。\n</code></pre>\n<h3><span id=\"api网关种类\">API网关种类</span></h3>\n<ol>\n<li>单节点网关<br>\n<img src=\"%E5%8D%95%E8%8A%82%E7%82%B9%E5%9C%BA%E6%99%AF%E7%BD%91%E5%85%B3.png\" alt=\"单节点场景网关\"><br>\n2.多节点网关<br>\n<img src=\"%E5%A4%9A%E8%8A%82%E7%82%B9%E5%9C%BA%E6%99%AF%E7%BD%91%E5%85%B3.png\" alt=\"多节点场景网关\"></li>\n</ol>\n<h4><span id=\"api网关网关的价值\">API网关网关的价值</span></h4>\n<pre><code>网关层对外部和内部进行了隔离，保障了后台服务的安全性。 \n对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本 \n减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射。 \n通过网关层聚合，减少外部访问的频次，提升访问效率。 \n节约后端服务开发成本，减少上线风险。 \n为服务熔断，灰度发布，线上测试提供简单方案。\n</code></pre>\n<h2><span id=\"开源微服务项目\">开源微服务项目</span></h2>\n<pre><code>Dubbo\nSpring Cloud\n</code></pre>\n<h2><span id=\"开源网关项目\">开源网关项目</span></h2>\n<pre><code>Tyk：Tyk是一个开放源码的API网关，它是快速、可扩展和现代的。Tyk提供了一个API管理平台，其中包括API网关、API分析、开发人员门户和API管理面板。Try 是一个基于Go实现的网关服务。\nKong：Kong是一个可扩展的开放源码API Layer(也称为API网关或API中间件)。Kong 在任何RESTful API的前面运行，通过插件扩展，它提供了超越核心平台的额外功能和服务。\nOrange：和Kong类似也是基于OpenResty的一个API网关程序，是由国人开发的。\nNetflix zuul：Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。\napiaxle: Nodejs 实现的一个 API 网关。\napi-umbrella: Ruby 实现的一个 API 网关。\n</code></pre>\n<h2><span id=\"网关技术选型\">网关技术选型</span></h2>\n<pre><code>kong \n    包含功能\n    (\n        统一入口\n        安全：黑名单、权限身份认证\n        限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n        缓存：数据缓存\n        日志：日志记录\n        监控：记录请求响应数据，api耗时分析，性能监控\n    )\nZuul\n    包含功能\n    (\n        重试\n        熔断\n    )\n    \nkong 是基于Nginx + Lua模式开发出来的，我们将要自己搭建一个属于自己的网关，所以采用Nginx + Lua，真实部署的时候可以\n采用kong+zuul的模式进行实际部署，因为自己搭建的需要考虑的问题有很多，当然自己构建的话，灵活性和个性化设置也是可以控制的，\n这个需要看看团队的实际需要，客观进行评估.\n</code></pre>\n<h3><span id=\"架构实现图\">架构实现图</span></h3>\n<p><img src=\"%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"><br>\n<img src=\"%E6%9E%B6%E6%9E%842.png\" alt=\"架构2\"><br>\n<img src=\"%E6%9E%B6%E6%9E%843.png\" alt=\"架构3\"></p>\n<h3><span id=\"项目运行环境\">项目运行环境</span></h3>\n<pre><code>CentOS\n</code></pre>\n<h3><span id=\"nginx安装\">Nginx安装</span></h3>\n<pre><code>请自行搜索教程安装\n</code></pre>\n<h2><span id=\"代理\">代理</span></h2>\n<h3><span id=\"正向代理\">正向代理</span></h3>\n<pre><code>用户要访问服务器C，但因为网络原因无法访问，但是服务器A可以访问服务器C，这样可以把服务器A设置为正向代理服务器\n由服务器A去请求服务器C，然后服务器A把数据返回给客户\n</code></pre>\n<p><img src=\"%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png\" alt=\"正向代理\"></p>\n<h3><span id=\"反向代理\">反向代理</span></h3>\n<pre><code>用户需要访问一些服务器应用，但对方不想把服务器应用地址暴露给用户，这样可以确保安全。那客户如果访问，可以通过反向代理\n服务器，用户只需要知道反向代理服务器地址就可以了，最后反向代理服务器去访问服务器的应用\n</code></pre>\n<p><img src=\"%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png\" alt=\"反向代理\"></p>\n<h3><span id=\"总结-正向代理与反向代理的区别\">总结: 正向代理与反向代理的区别</span></h3>\n<pre><code>(1)正向代理是需要在用户的电脑上，配置正向服务代理器的；而反向代理则不需要，因为用户是直接访问反向代理器的\n(2)正向代理的应用场景是用户是知道目标服务器地址，如:http://www.baidu.com,但是不能直接的访问，那么就需要在电脑配置一个正向\n代理服务器，用户再次访问的地址就是www.google.com\n  而反向代理的应用场景是，用户本来就是不知道目标服务器的地址，而是由平台方提供一个反向代理服务器的地址，用户直接访问反向代理服务器的地址就行了，www.a.com\n  不管目标服务器有多少，用户是不需要关心的，只要访问反向代理服务器就OK，由反向代理服务器去解析访问目标服务器\n(3)反向代理，极大的保护了应用的安全性，而且此结构能够很好的搭建负载均衡\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1>概念介绍</h1>\n<h3>网关作用</h3>\n<pre><code>统一入口\n安全：黑名单、权限身份认证\n限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n缓存：数据缓存\n日志：日志记录\n监控：记录请求响应数据，api耗时分析，性能监控\n重试：异常重试\n熔断：降级 (防止服务雪崩)\n</code></pre>\n<h3>API网关</h3>\n<pre><code>API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。\nAPI网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。\n</code></pre>\n<h3>API网关种类</h3>\n<ol>\n<li>单节点网关<br>\n<img src=\"%E5%8D%95%E8%8A%82%E7%82%B9%E5%9C%BA%E6%99%AF%E7%BD%91%E5%85%B3.png\" alt=\"单节点场景网关\"><br>\n2.多节点网关<br>\n<img src=\"%E5%A4%9A%E8%8A%82%E7%82%B9%E5%9C%BA%E6%99%AF%E7%BD%91%E5%85%B3.png\" alt=\"多节点场景网关\"></li>\n</ol>\n<h4>API网关网关的价值</h4>\n<pre><code>网关层对外部和内部进行了隔离，保障了后台服务的安全性。 \n对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本 \n减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射。 \n通过网关层聚合，减少外部访问的频次，提升访问效率。 \n节约后端服务开发成本，减少上线风险。 \n为服务熔断，灰度发布，线上测试提供简单方案。\n</code></pre>\n<h2>开源微服务项目</h2>\n<pre><code>Dubbo\nSpring Cloud\n</code></pre>\n<h2>开源网关项目</h2>\n<pre><code>Tyk：Tyk是一个开放源码的API网关，它是快速、可扩展和现代的。Tyk提供了一个API管理平台，其中包括API网关、API分析、开发人员门户和API管理面板。Try 是一个基于Go实现的网关服务。\nKong：Kong是一个可扩展的开放源码API Layer(也称为API网关或API中间件)。Kong 在任何RESTful API的前面运行，通过插件扩展，它提供了超越核心平台的额外功能和服务。\nOrange：和Kong类似也是基于OpenResty的一个API网关程序，是由国人开发的。\nNetflix zuul：Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。\napiaxle: Nodejs 实现的一个 API 网关。\napi-umbrella: Ruby 实现的一个 API 网关。\n</code></pre>\n<h2>网关技术选型</h2>\n<pre><code>kong \n    包含功能\n    (\n        统一入口\n        安全：黑名单、权限身份认证\n        限流：实现微服务访问流量计算，基于流量计算分析进行限流，可以定义多种限流规则。\n        缓存：数据缓存\n        日志：日志记录\n        监控：记录请求响应数据，api耗时分析，性能监控\n    )\nZuul\n    包含功能\n    (\n        重试\n        熔断\n    )\n    \nkong 是基于Nginx + Lua模式开发出来的，我们将要自己搭建一个属于自己的网关，所以采用Nginx + Lua，真实部署的时候可以\n采用kong+zuul的模式进行实际部署，因为自己搭建的需要考虑的问题有很多，当然自己构建的话，灵活性和个性化设置也是可以控制的，\n这个需要看看团队的实际需要，客观进行评估.\n</code></pre>\n<h3>架构实现图</h3>\n<p><img src=\"%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"><br>\n<img src=\"%E6%9E%B6%E6%9E%842.png\" alt=\"架构2\"><br>\n<img src=\"%E6%9E%B6%E6%9E%843.png\" alt=\"架构3\"></p>\n<h3>项目运行环境</h3>\n<pre><code>CentOS\n</code></pre>\n<h3>Nginx安装</h3>\n<pre><code>请自行搜索教程安装\n</code></pre>\n<h2>代理</h2>\n<h3>正向代理</h3>\n<pre><code>用户要访问服务器C，但因为网络原因无法访问，但是服务器A可以访问服务器C，这样可以把服务器A设置为正向代理服务器\n由服务器A去请求服务器C，然后服务器A把数据返回给客户\n</code></pre>\n<p><img src=\"%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png\" alt=\"正向代理\"></p>\n<h3>反向代理</h3>\n<pre><code>用户需要访问一些服务器应用，但对方不想把服务器应用地址暴露给用户，这样可以确保安全。那客户如果访问，可以通过反向代理\n服务器，用户只需要知道反向代理服务器地址就可以了，最后反向代理服务器去访问服务器的应用\n</code></pre>\n<p><img src=\"%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png\" alt=\"反向代理\"></p>\n<h3>总结: 正向代理与反向代理的区别</h3>\n<pre><code>(1)正向代理是需要在用户的电脑上，配置正向服务代理器的；而反向代理则不需要，因为用户是直接访问反向代理器的\n(2)正向代理的应用场景是用户是知道目标服务器地址，如:http://www.baidu.com,但是不能直接的访问，那么就需要在电脑配置一个正向\n代理服务器，用户再次访问的地址就是www.google.com\n  而反向代理的应用场景是，用户本来就是不知道目标服务器的地址，而是由平台方提供一个反向代理服务器的地址，用户直接访问反向代理服务器的地址就行了，www.a.com\n  不管目标服务器有多少，用户是不需要关心的，只要访问反向代理服务器就OK，由反向代理服务器去解析访问目标服务器\n(3)反向代理，极大的保护了应用的安全性，而且此结构能够很好的搭建负载均衡\n</code></pre>\n"}],"PostAsset":[{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/vhost.png","slug":"vhost.png","post":"cjphvzafv000680ujrgvui7ay","modified":1,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cjphvzafy000880ujcd2njsvu","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/多节点场景网关.png","slug":"多节点场景网关.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/架构.png","slug":"架构.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/架构2.png","slug":"架构2.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/架构3.png","slug":"架构3.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/正向代理.png","slug":"正向代理.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-2.png","slug":"nginx日志以及切割-2.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/基本配置.png","slug":"基本配置.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/用户管理-添加用户.png","slug":"用户管理-添加用户.png","post":"cjphvzafv000680ujrgvui7ay","modified":1,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cjphvzafy000880ujcd2njsvu","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-10.png","slug":"nginx日志以及切割-10.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-8.png","slug":"nginx日志以及切割-8.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-2.png","slug":"nginx设置连接数-2.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-3.png","slug":"nginx设置连接数-3.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/平滑升级.png","slug":"平滑升级.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-5.png","slug":"配置文件的注意事项-5.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-3.png","slug":"nginx虚拟主机-3.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-2.png","slug":"nginx虚拟主机-2.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-1.png","slug":"nginx设置连接数-1.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/平滑升级2.png","slug":"平滑升级2.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/平滑升级中途退出.png","slug":"平滑升级中途退出.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-2.png","slug":"配置文件的注意事项-2.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-7.png","slug":"配置文件的注意事项-7.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/Demo.png","slug":"Demo.png","post":"cjphvzafq000380ujwn43cpij","modified":1,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/工作队列.png","post":"cjphvzafq000380ujwn43cpij","slug":"工作队列.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-2-队列模型/简单队列.png","post":"cjphvzafq000380ujwn43cpij","slug":"简单队列.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","slug":"Demo.png","post":"cjphvzafy000880ujcd2njsvu","modified":1,"renderable":0},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/Demo.png","slug":"Demo.png","post":"cjphvzafk000180uj6p0r6uak","modified":1,"renderable":0},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC特点.png","post":"cjphvzafk000180uj6p0r6uak","slug":"gRPC特点.png","modified":1,"renderable":1},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC调用示例.png","post":"cjphvzafk000180uj6p0r6uak","slug":"gRPC调用示例.png","modified":1,"renderable":1},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/rpc原理图.png","post":"cjphvzafk000180uj6p0r6uak","slug":"rpc原理图.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-1/Demo.png","slug":"Demo.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-1/单节点场景网关.png","post":"cjphvzag6000b80ujqpbihblq","slug":"单节点场景网关.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-1/反向代理.png","post":"cjphvzag6000b80ujqpbihblq","slug":"反向代理.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-1/新旧进程同在.png","slug":"新旧进程同在.png","post":"cjphvzag6000b80ujqpbihblq","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-11.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-11.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/Demo.png","slug":"Demo.png","post":"cjphvzafv000680ujrgvui7ay","modified":1,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权.png","post":"cjphvzafv000680ujrgvui7ay","slug":"v-host授权.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权2.png","post":"cjphvzafv000680ujrgvui7ay","slug":"v-host授权2.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host授权后.png","post":"cjphvzafv000680ujrgvui7ay","slug":"v-host授权后.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/v-host添加.png","post":"cjphvzafv000680ujrgvui7ay","slug":"v-host添加.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/异步处理.png","post":"cjphvzafv000680ujrgvui7ay","slug":"异步处理.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/日志收集与处理.png","post":"cjphvzafv000680ujrgvui7ay","slug":"日志收集与处理.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/秒杀抢购.png","post":"cjphvzafv000680ujrgvui7ay","slug":"秒杀抢购.png","modified":1,"renderable":1},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/系统解耦.png","post":"cjphvzafv000680ujrgvui7ay","slug":"系统解耦.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx虚拟主机-1.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx虚拟主机-1.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-4.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx设置连接数-4.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-3.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"配置文件的注意事项-3.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-4.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"配置文件的注意事项-4.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"配置文件的注意事项.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/Demo.png","slug":"Demo.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-1.png","slug":"nginx日志以及切割-1.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-3.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-3.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-4.png","slug":"nginx日志以及切割-4.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-5.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-5.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-6.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-6.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-7.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-7.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx日志以及切割-9.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx日志以及切割-9.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/nginx设置连接数-5.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"nginx设置连接数-5.png","modified":1,"renderable":1},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-6.png","slug":"配置文件的注意事项-6.png","post":"cjphvzag0000980uj8lm1mwtg","modified":1,"renderable":0},{"_id":"source/_posts/微服务API网关框架-2/配置文件的注意事项-8.png","post":"cjphvzag0000980uj8lm1mwtg","slug":"配置文件的注意事项-8.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjphvzafk000180uj6p0r6uak","tag_id":"cjphvzaft000580ujlwwapz7j","_id":"cjphvzagd000d80ujfouk9o62"},{"post_id":"cjphvzafk000180uj6p0r6uak","tag_id":"cjphvzag2000a80ujgb69fim1","_id":"cjphvzagg000e80ujm0nca85a"},{"post_id":"cjphvzafq000380ujwn43cpij","tag_id":"cjphvzaga000c80ujgr3nss5f","_id":"cjphvzagk000g80ujtxwi86di"},{"post_id":"cjphvzafv000680ujrgvui7ay","tag_id":"cjphvzaga000c80ujgr3nss5f","_id":"cjphvzagp000i80ujsjrj81hh"},{"post_id":"cjphvzafy000880ujcd2njsvu","tag_id":"cjphvzagn000h80ujxextjcer","_id":"cjphvzagt000k80ujmavjtp9m"},{"post_id":"cjphvzag0000980uj8lm1mwtg","tag_id":"cjphvzags000j80uj5cu9laso","_id":"cjphvzagv000m80ujlg9uqfvg"},{"post_id":"cjphvzag6000b80ujqpbihblq","tag_id":"cjphvzags000j80uj5cu9laso","_id":"cjphvzagw000n80ujwapiglym"}],"Tag":[{"name":"gRPC","_id":"cjphvzaft000580ujlwwapz7j"},{"name":"golang","_id":"cjphvzag2000a80ujgb69fim1"},{"name":"RabbitMQ 消息队列","_id":"cjphvzaga000c80ujgr3nss5f"},{"name":"Hexo","_id":"cjphvzagn000h80ujxextjcer"},{"name":"微服务API网关","_id":"cjphvzags000j80uj5cu9laso"}]}}