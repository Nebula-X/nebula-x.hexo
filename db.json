{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/signature/nebula-black.png","path":"img/signature/nebula-black.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/nebula-white.png","path":"img/signature/nebula-white.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/beantech/_config.yml","hash":"f0796b8e85fe6b3154a5fa442420003fe18dff0a","modified":1541580566724},{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1541580566620},{"_id":"source/CNAME","hash":"c9e7a36a848473962a7689ab37caf5b9347af655","modified":1541671811512},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1541580566725},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1541580566726},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1541580566726},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1541580566727},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1541580566728},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1541580566729},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1541580566730},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1541580566730},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1541580566731},{"_id":"themes/beantech/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1541580566732},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1541580566723},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1541580566742},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1541580566744},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1541580566743},{"_id":"themes/beantech/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1541580566745},{"_id":"themes/beantech/layout/post.ejs","hash":"8aef246a0a5c7bc24b47db836ec07b37bc6f5ad6","modified":1541692199751},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1541580566749},{"_id":"source/about/index.md","hash":"28611a9a0b9074734fce81b4f6669bf652a1b4c3","modified":1541726221596},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识.md","hash":"47792f93685cf7f46c1a66aa31cb6dd3993721e4","modified":1542768967750},{"_id":"source/_posts/基于Golang的gRPC使用笔记1.md","hash":"c2686645ab891e09e60d2651dca34e60d6be542e","modified":1542725365945},{"_id":"source/archive/index.md","hash":"971fdb6d0fc384fe1301dc82a68568d5ab29d332","modified":1541726039442},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1541580566742},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"d7b8618bbd1a4897781c9a75309c02e097d4d74e","modified":1541807596362},{"_id":"themes/beantech/layout/page.ejs","hash":"b6d161e11168c73122cbf2a41b7307bef4ab5dbd","modified":1541692415317},{"_id":"source/tags/index.md","hash":"d8fbfb47afcf8bbf75c4b1244d5727e20a01cd99","modified":1541726588994},{"_id":"source/img/avatar.jpg","hash":"77c450e6ef9c5c243fdd212a87fedda945718382","modified":1541691053456},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1541580566711},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"447d159e505f5dbd56b79f5994e038d46ddde509","modified":1541679641600},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1541580566736},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1541580566736},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1541580566737},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1541580566738},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1541580566739},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"51543d9f7d41abdb4deff7ff949cd5ecad074853","modified":1541692709095},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"db2471d05df2ad0b3ec882595550e68163ffbc45","modified":1541692507534},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"305bd9feaf2484052ba2925a13ebb8723a885396","modified":1541671090453},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"258af22c0c8d5dce3f218f4cc8b2220f38a841b9","modified":1541580566734},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"9aea336d3907735eedabcfb21c286cd54a01f45f","modified":1541580566734},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1541580566751},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"f3f4fd95fbb98090d6abd94b855d0a39c8bed9f5","modified":1541692753069},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1541580566735},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1541580566752},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1541580566759},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1541580566753},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1541580566760},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1541580566764},{"_id":"themes/beantech/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1541580566766},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1541580566768},{"_id":"themes/beantech/source/css/toc.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1541580566765},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1541580566773},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1541580566771},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1541580566779},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1541580566775},{"_id":"themes/beantech/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1541580566764},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1541580566781},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1541580566780},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1541580566789},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1541580566788},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1541580566790},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1541580566788},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC特点.png","hash":"1ff8aa50c81a7560bc3571af57848ec98d8e10f3","modified":1542004381200},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC调用示例.png","hash":"0bd9f2344416c46b2d99612d47db8aafd734c7fa","modified":1542004252689},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/rpc原理图.png","hash":"04ccbcfe8ff0734f2175bcaf7bbd3a3889f14a49","modified":1542003658824},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1541580566645},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1541580566758},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1541580566770},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1541580566778},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1541580566787},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1541580566658},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1541580566762},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1541580566763},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1541580566756},{"_id":"source/img/signature/nebula-black.png","hash":"faf235e18821463843caefc127c750a227b3ed69","modified":1541728036564},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1541580566785},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1541580566638},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1541580566656},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1541580566636},{"_id":"source/img/signature/nebula-white.png","hash":"a3c2e03ae0a23beb01a15f37424835c001d93cfd","modified":1541728030087},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1541580566710},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1541580566654},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1541580566707},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1541580566669},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1541580566693},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1541580566682},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1541580566633},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/日志收集与处理.png","hash":"19aebd9fd04bb76cbd64edfd2a7b63c8426315cd","modified":1542766790132},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/异步处理.png","hash":"666bb259fc180c35ce51e090d6dfabfbda5a08ef","modified":1542767722125},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/秒杀抢购.png","hash":"1065b2ba7a9593c5879a2039b16fe157158d3455","modified":1542768240639},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/系统解耦.png","hash":"2c9ac9d22338ab6926704730cb28ed775b24b128","modified":1542767885748}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-11-07T08:49:26.620Z","updated":"2018-11-07T08:49:26.620Z","path":"404.html","title":"","comments":1,"_id":"cjoqjal3b0000i8ujhnce0tgm","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"关于我","date":"2018-11-08T16:00:00.000Z","description":"勿在浮沙筑高台，不为浮华易匠心","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于我\"\ndate: 2018-11-09 00:00:00\ndescription: \"勿在浮沙筑高台，不为浮华易匠心\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","updated":"2018-11-09T01:17:01.596Z","path":"about/index.html","_id":"cjoqjal5n0001i8ujtgukn501","content":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n"},{"layout":"archive","title":"归档","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"时光匆匆流逝，记录的却是简单的过去","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"归档\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"时光匆匆流逝，记录的却是简单的过去\"\n---\n","updated":"2018-11-09T01:13:59.442Z","path":"archive/index.html","_id":"cjoqjal5u0003i8ujghyr6zl8","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"书签","description":"嗯，分类是个好习惯","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"书签\"\ndescription: \"嗯，分类是个好习惯\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2018-11-09T01:23:09.047Z","updated":"2018-11-09T01:23:08.994Z","path":"tags/index.html","comments":1,"_id":"cjoqjal620006i8ujiit6mvys","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"gRPC使用 -- Golang版示例","catalog":true,"date":"2018-11-12T06:00:00.000Z","subtitle":null,"header-img":null,"catagories":["Hexo"],"_content":"# RPC入门\n\n## RPC框架原理\n```\n    RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式(TCP或者UDP),\n    序列化方式(XML/JSON/二进制)和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，\n    而不需要关心底层通信细节和调用过程.\n```\n![rpc原理图](rpc原理图.png)\n\n## gRPC\n\n### gRPC简介\n```\n    gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/2设计.\n```\n![gRPC调用示例](gRPC调用示例.png)\n\n### gRPC特点\n![gRPC特点](gRPC特点.png)\n\n### Golang gRPC 示例\n\n#### 1、安装gRPC runtime\n```\ngo get google.golang.org/grpc\n```\n\n#### 2、protocal buffer安装\n```\n从https://github.com/google/protobuf/releases下载安装包，\n例如：protobuf-cpp-3.0.0-beta-3.zip，解压后\n./configure\nmake && make install\n再添加环境变量：export LD_LIBRARY_PATH=/usr/local/lib，之后protoc命令即可运行    \n```\n\n#### 3、安装GoLang protoc 插件\n```\ngo get -a github.com/golang/protobuf/protoc-gen-go\n```\n\n#### 4、定义service\n一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：\n```\nsyntax = \"proto3\";\n \noption java_package = \"io.grpc.examples\";\n \npackage helloworld;\n \n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n \n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n \n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n#### 5.生成Golang通用代码\n```\n接着，根据上述定义的service，我们可以利用protocal buffer compiler ，\n即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。\n假设现在所在的目录是$GOPATH/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：\nprotoc -I ./ helloworld.proto --go_out=plugins=grpc:.\n```\n\n#### 6.生成相关的RPC的客户端和服务端\n在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现\n\n##### 服务端代码\n```\npackage main\n \n// server.go\n \nimport (\n    \"log\"\n    \"net\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    port = \":50051\"\n)\n \ntype server struct {}\n \nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n    return &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n \nfunc main() {\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatal(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGreeterServer(s, &server{})\n    s.Serve(lis)\n}\n```\n\n##### 客户端代码\n```\npackage main\n \n//client.go\n \nimport (\n    \"log\"\n    \"os\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    address     = \"localhost:50051\"\n    defaultName = \"world\"\n)\n \nfunc main() {\n    conn, err := grpc.Dial(address, grpc.WithInsecure())\n    if err != nil {\n        log.Fatal(\"did not connect: %v\", err)\n    }\n    defer conn.Close()\n    c := pb.NewGreeterClient(conn)\n \n    name := defaultName\n    if len(os.Args) >1 {\n        name = os.Args[1]\n    }\n    r, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n    if err != nil {\n        log.Fatal(\"could not greet: %v\", err)\n    }\n    log.Printf(\"Greeting: %s\", r.Message)\n}\n```\n这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下\n\n#### 7.运行示例\n```\ngo run server.go\ngo run client.go\n```\n","source":"_posts/基于Golang的gRPC使用笔记1.md","raw":"---\ntitle: gRPC使用 -- Golang版示例\ncatalog: true\ndate: 2018-11-12 14:00:00\nsubtitle:\nheader-img:\ntags:\n- gRPC\n- golang\ncatagories:\n- Hexo\n---\n# RPC入门\n\n## RPC框架原理\n```\n    RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式(TCP或者UDP),\n    序列化方式(XML/JSON/二进制)和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，\n    而不需要关心底层通信细节和调用过程.\n```\n![rpc原理图](rpc原理图.png)\n\n## gRPC\n\n### gRPC简介\n```\n    gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/2设计.\n```\n![gRPC调用示例](gRPC调用示例.png)\n\n### gRPC特点\n![gRPC特点](gRPC特点.png)\n\n### Golang gRPC 示例\n\n#### 1、安装gRPC runtime\n```\ngo get google.golang.org/grpc\n```\n\n#### 2、protocal buffer安装\n```\n从https://github.com/google/protobuf/releases下载安装包，\n例如：protobuf-cpp-3.0.0-beta-3.zip，解压后\n./configure\nmake && make install\n再添加环境变量：export LD_LIBRARY_PATH=/usr/local/lib，之后protoc命令即可运行    \n```\n\n#### 3、安装GoLang protoc 插件\n```\ngo get -a github.com/golang/protobuf/protoc-gen-go\n```\n\n#### 4、定义service\n一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：\n```\nsyntax = \"proto3\";\n \noption java_package = \"io.grpc.examples\";\n \npackage helloworld;\n \n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n \n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n \n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n#### 5.生成Golang通用代码\n```\n接着，根据上述定义的service，我们可以利用protocal buffer compiler ，\n即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。\n假设现在所在的目录是$GOPATH/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：\nprotoc -I ./ helloworld.proto --go_out=plugins=grpc:.\n```\n\n#### 6.生成相关的RPC的客户端和服务端\n在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现\n\n##### 服务端代码\n```\npackage main\n \n// server.go\n \nimport (\n    \"log\"\n    \"net\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    port = \":50051\"\n)\n \ntype server struct {}\n \nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n    return &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n \nfunc main() {\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatal(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGreeterServer(s, &server{})\n    s.Serve(lis)\n}\n```\n\n##### 客户端代码\n```\npackage main\n \n//client.go\n \nimport (\n    \"log\"\n    \"os\"\n \n    \"golang.org/x/net/context\"\n    \"google.golang.org/grpc\"\n    pb \"helloworld/helloworld\"\n)\n \nconst (\n    address     = \"localhost:50051\"\n    defaultName = \"world\"\n)\n \nfunc main() {\n    conn, err := grpc.Dial(address, grpc.WithInsecure())\n    if err != nil {\n        log.Fatal(\"did not connect: %v\", err)\n    }\n    defer conn.Close()\n    c := pb.NewGreeterClient(conn)\n \n    name := defaultName\n    if len(os.Args) >1 {\n        name = os.Args[1]\n    }\n    r, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n    if err != nil {\n        log.Fatal(\"could not greet: %v\", err)\n    }\n    log.Printf(\"Greeting: %s\", r.Message)\n}\n```\n这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下\n\n#### 7.运行示例\n```\ngo run server.go\ngo run client.go\n```\n","slug":"基于Golang的gRPC使用笔记1","published":1,"updated":"2018-11-20T14:49:25.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoqjal5p0002i8uj7udvwhmi","content":"<h1><span id=\"rpc入门\">RPC入门</span></h1>\n<h2><span id=\"rpc框架原理\">RPC框架原理</span></h2>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式<span class=\"comment\">(TCP或者UDP)</span>,</span><br><span class=\"line\">序列化方式<span class=\"comment\">(XML/JSON/二进制)</span>和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，</span><br><span class=\"line\">而不需要关心底层通信细节和调用过程.</span><br></pre></td></tr></table></figure>\n<p><img src=\"rpc%E5%8E%9F%E7%90%86%E5%9B%BE.png\" alt=\"rpc原理图\"></p>\n<h2><span id=\"grpc\">gRPC</span></h2>\n<h3><span id=\"grpc简介\">gRPC简介</span></h3>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/<span class=\"number\">2</span>设计.</span><br></pre></td></tr></table></figure>\n<p><img src=\"gRPC%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.png\" alt=\"gRPC调用示例\"></p>\n<h3><span id=\"grpc特点\">gRPC特点</span></h3>\n<p><img src=\"gRPC%E7%89%B9%E7%82%B9.png\" alt=\"gRPC特点\"></p>\n<h3><span id=\"golang-grpc-示例\">Golang gRPC 示例</span></h3>\n<h4><span id=\"1-安装grpc-runtime\">1、安装gRPC runtime</span></h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get google<span class=\"selector-class\">.golang</span><span class=\"selector-class\">.org</span>/grpc</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2-protocal-buffer安装\">2、protocal buffer安装</span></h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从https:<span class=\"comment\">//github.com/google/protobuf/releases下载安装包，</span></span><br><span class=\"line\">例如：protobuf-cpp<span class=\"number\">-3.0</span><span class=\"number\">.0</span>-<span class=\"built_in\">beta</span><span class=\"number\">-3.</span>zip，解压后</span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"built_in\">make</span> &amp;&amp; <span class=\"built_in\">make</span> install</span><br><span class=\"line\">再添加环境变量：export LD_LIBRARY_PATH=/usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">lib</span>，之后protoc命令即可运行</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3-安装golang-protoc-插件\">3、安装GoLang protoc 插件</span></h4>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">a</span> github.<span class=\"keyword\">com</span>/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"4-定义service\">4、定义service</span></h4>\n<p>一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：</p>\n<figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">option java_package = <span class=\"string\">\"io.grpc.examples\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"5生成golang通用代码\">5.生成Golang通用代码</span></h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着，根据上述定义的service，我们可以利用protocal buffer compiler ，</span><br><span class=\"line\">即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。</span><br><span class=\"line\">假设现在所在的目录是<span class=\"variable\">$GOPATH</span>/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：</span><br><span class=\"line\">protoc -I ./ helloworld.proto <span class=\"attribute\">--go_out</span>=plugins=grpc:.</span><br></pre></td></tr></table></figure>\n<h4><span id=\"6生成相关的rpc的客户端和服务端\">6.生成相关的RPC的客户端和服务端</span></h4>\n<p>在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现</p>\n<h5><span id=\"服务端代码\">服务端代码</span></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// server.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    port = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    lis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s := grpc.NewServer()</span><br><span class=\"line\">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">    s.Serve(lis)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"客户端代码\">客户端代码</span></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//client.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    address     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">    defaultName = <span class=\"string\">\"world\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    c := pb.NewGreeterClient(conn)</span><br><span class=\"line\"> </span><br><span class=\"line\">    name := defaultName</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        name = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，<br>\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下</p>\n<h4><span id=\"7运行示例\">7.运行示例</span></h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"keyword\">run</span><span class=\"bash\"> server.go</span></span><br><span class=\"line\"><span class=\"bash\">go run client.go</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>RPC入门</h1>\n<h2>RPC框架原理</h2>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RPC框架的目的就是让远程服务调用更加简单,透明，RPC框架负责屏蔽底层的传输方式<span class=\"comment\">(TCP或者UDP)</span>,</span><br><span class=\"line\">序列化方式<span class=\"comment\">(XML/JSON/二进制)</span>和通信细节。服务调用者可以向本地接口一样调用远程的服务提供者，</span><br><span class=\"line\">而不需要关心底层通信细节和调用过程.</span><br></pre></td></tr></table></figure>\n<p><img src=\"rpc%E5%8E%9F%E7%90%86%E5%9B%BE.png\" alt=\"rpc原理图\"></p>\n<h2>gRPC</h2>\n<h3>gRPC简介</h3>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gRPC 是一个高性能、开源和通用的 RPC 框架，面向服务端和移动端,基于HTTP/<span class=\"number\">2</span>设计.</span><br></pre></td></tr></table></figure>\n<p><img src=\"gRPC%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.png\" alt=\"gRPC调用示例\"></p>\n<h3>gRPC特点</h3>\n<p><img src=\"gRPC%E7%89%B9%E7%82%B9.png\" alt=\"gRPC特点\"></p>\n<h3>Golang gRPC 示例</h3>\n<h4>1、安装gRPC runtime</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get google<span class=\"selector-class\">.golang</span><span class=\"selector-class\">.org</span>/grpc</span><br></pre></td></tr></table></figure>\n<h4>2、protocal buffer安装</h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从https:<span class=\"comment\">//github.com/google/protobuf/releases下载安装包，</span></span><br><span class=\"line\">例如：protobuf-cpp<span class=\"number\">-3.0</span><span class=\"number\">.0</span>-<span class=\"built_in\">beta</span><span class=\"number\">-3.</span>zip，解压后</span><br><span class=\"line\">./configure</span><br><span class=\"line\"><span class=\"built_in\">make</span> &amp;&amp; <span class=\"built_in\">make</span> install</span><br><span class=\"line\">再添加环境变量：export LD_LIBRARY_PATH=/usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">lib</span>，之后protoc命令即可运行</span><br></pre></td></tr></table></figure>\n<h4>3、安装GoLang protoc 插件</h4>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">a</span> github.<span class=\"keyword\">com</span>/golang/protobuf/protoc-gen-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4>4、定义service</h4>\n<p>一个RPC service就是一个能够通过参数和返回值进行远程调用的method，我们可以简单地将它理解成一个函数。因为gRPC是通过将数据编码成protocal buffer来实现传输的。因此，我们通过protocal buffers interface definitioin language(IDL)来定义service method，同时将参数和返回值也定义成protocal buffer message类型。具体实现如下所示，包含下面代码的文件叫helloworld.proto：</p>\n<figure class=\"highlight thrift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">option java_package = <span class=\"string\">\"io.grpc.examples\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">package helloworld;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4>5.生成Golang通用代码</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着，根据上述定义的service，我们可以利用protocal buffer compiler ，</span><br><span class=\"line\">即protoc生成相应的服务器端和客户端的GoLang代码。生成的代码中包含了客户端能够进行RPC的方法以及服务器端需要进行实现的接口。</span><br><span class=\"line\">假设现在所在的目录是<span class=\"variable\">$GOPATH</span>/src/helloworld/helloworld，我们将通过如下命令生成gRPC对应的GoLang代码：</span><br><span class=\"line\">protoc -I ./ helloworld.proto <span class=\"attribute\">--go_out</span>=plugins=grpc:.</span><br></pre></td></tr></table></figure>\n<h4>6.生成相关的RPC的客户端和服务端</h4>\n<p>在目录$GOPATH/src/helloworld/下创建server.go 和client.go，分别用于服务器和客户端的实现</p>\n<h5>服务端代码</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// server.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    port = <span class=\"string\">\":50051\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">type</span> server <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span> <span class=\"title\">SayHello</span><span class=\"params\">(ctx context.Context, in *pb.HelloRequest)</span> <span class=\"params\">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;pb.HelloReply&#123;Message: <span class=\"string\">\"Hello \"</span> + in.Name&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    lis, err := net.Listen(<span class=\"string\">\"tcp\"</span>, port)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"failed to listen: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s := grpc.NewServer()</span><br><span class=\"line\">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\">    s.Serve(lis)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5>客户端代码</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//client.go</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"os\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"golang.org/x/net/context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc\"</span></span><br><span class=\"line\">    pb <span class=\"string\">\"helloworld/helloworld\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    address     = <span class=\"string\">\"localhost:50051\"</span></span><br><span class=\"line\">    defaultName = <span class=\"string\">\"world\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"did not connect: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    c := pb.NewGreeterClient(conn)</span><br><span class=\"line\"> </span><br><span class=\"line\">    name := defaultName</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        name = os.Args[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(<span class=\"string\">\"could not greet: %v\"</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Greeting: %s\"</span>, r.Message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是包pb是我们之前生成的helloworld.pb.go所在的包，<br>\n并非必须如上述代码所示在$GOPATH/src/helloworld/helloworld目录下</p>\n<h4>7.运行示例</h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"keyword\">run</span><span class=\"bash\"> server.go</span></span><br><span class=\"line\"><span class=\"bash\">go run client.go</span></span><br></pre></td></tr></table></figure>\n"},{"title":"[Hexo] 主题使用教程","catalog":true,"date":"2018-11-08T16:23:00.000Z","subtitle":"This is hexo theme Demo.","header-img":"Demo.png","catagories":["Hexo"],"_content":"> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-beantech.md","raw":"---\ntitle: \"[Hexo] 主题使用教程\"\ncatalog: true\ndate: 2018-11-09 00:23:00\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"Demo.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\n---\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-beantech","published":1,"updated":"2018-11-09T23:53:16.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoqjal5w0004i8uj1e3um93i","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\"><span class=\"attr\">  render:</span></span><br><span class=\"line\"><span class=\"attr\">    html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">    breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"RabbitMQ学习(1)--概念与认识","catalog":true,"date":"2018-11-21T02:11:54.000Z","subtitle":null,"header-img":"Demo.png","catagories":["RabbitMQ"],"_content":"# RabbitMQ学习(1)--概念与认识\n\n## 消息队列\n\n### 解决了什么问题\n1.异步处理\n>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完\n\n![异步处理](异步处理.png)\n2.应用解耦\n>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通\n\n![系统解耦](系统解耦.png)\n3.流量削锋\n>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃\n\n![秒杀抢购](秒杀抢购.png)\n4.日志处理\n>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理\n\n>流计算：就是实时计算，生成显示数据\n离线计算：对数据进行持久化\n\n![日志收集与处理](日志收集与处理.png)\n\n5. 等等\n","source":"_posts/RabbitMQ学习-1-概念与认识.md","raw":"---\ntitle: \"RabbitMQ学习(1)--概念与认识\"\ncatalog: true\ndate: 2018-11-21 10:11:54\nsubtitle: \nheader-img: \"Demo.png\"\ntags:\n- RabbitMQ 消息队列\ncatagories:\n- RabbitMQ\n---\n# RabbitMQ学习(1)--概念与认识\n\n## 消息队列\n\n### 解决了什么问题\n1.异步处理\n>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完\n\n![异步处理](异步处理.png)\n2.应用解耦\n>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通\n\n![系统解耦](系统解耦.png)\n3.流量削锋\n>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃\n\n![秒杀抢购](秒杀抢购.png)\n4.日志处理\n>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理\n\n>流计算：就是实时计算，生成显示数据\n离线计算：对数据进行持久化\n\n![日志收集与处理](日志收集与处理.png)\n\n5. 等等\n","slug":"RabbitMQ学习-1-概念与认识","published":1,"updated":"2018-11-21T02:56:07.750Z","_id":"cjoqjar06000ci8ujeqo2ta9z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"rabbitmq学习1概念与认识\">RabbitMQ学习(1)–概念与认识</span></h1>\n<h2><span id=\"消息队列\">消息队列</span></h2>\n<h3><span id=\"解决了什么问题\">解决了什么问题</span></h3>\n<p>1.异步处理</p>\n<blockquote>\n<p>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完</p>\n</blockquote>\n<p><img src=\"%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.png\" alt=\"异步处理\"><br>\n2.应用解耦</p>\n<blockquote>\n<p>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通</p>\n</blockquote>\n<p><img src=\"%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"系统解耦\"><br>\n3.流量削锋</p>\n<blockquote>\n<p>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃</p>\n</blockquote>\n<p><img src=\"%E7%A7%92%E6%9D%80%E6%8A%A2%E8%B4%AD.png\" alt=\"秒杀抢购\"><br>\n4.日志处理</p>\n<blockquote>\n<p>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理</p>\n</blockquote>\n<blockquote>\n<p>流计算：就是实时计算，生成显示数据<br>\n离线计算：对数据进行持久化</p>\n</blockquote>\n<p><img src=\"%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E4%B8%8E%E5%A4%84%E7%90%86.png\" alt=\"日志收集与处理\"></p>\n<ol start=\"5\">\n<li>等等</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>RabbitMQ学习(1)–概念与认识</h1>\n<h2>消息队列</h2>\n<h3>解决了什么问题</h3>\n<p>1.异步处理</p>\n<blockquote>\n<p>以前一般写业务是串行模式，发短信是耗费时间的操作，串行有可能断开HTTP连接还没有做完</p>\n</blockquote>\n<p><img src=\"%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.png\" alt=\"异步处理\"><br>\n2.应用解耦</p>\n<blockquote>\n<p>即多个子系统有关联，例如库存与订单系统，如果使用串行的模式，有可能在运行的过程中，由于系统间的通讯异常,造成数据丢失，这样会影响整个流程不能正常的走通</p>\n</blockquote>\n<p><img src=\"%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"系统解耦\"><br>\n3.流量削锋</p>\n<blockquote>\n<p>使用MQ之后,如果不满足的请求直接丢弃，这样可以把我们大量请求处理进行隔绝，保证业务不会因海量的访问而崩溃</p>\n</blockquote>\n<p><img src=\"%E7%A7%92%E6%9D%80%E6%8A%A2%E8%B4%AD.png\" alt=\"秒杀抢购\"><br>\n4.日志处理</p>\n<blockquote>\n<p>下面例子用于统计UV,PV等日志数据例子,一般来说，日志不会直接写入数据库，而是先写入文件，再由日志收集工具(logstash)进行统一的处理</p>\n</blockquote>\n<blockquote>\n<p>流计算：就是实时计算，生成显示数据<br>\n离线计算：对数据进行持久化</p>\n</blockquote>\n<p><img src=\"%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E4%B8%8E%E5%A4%84%E7%90%86.png\" alt=\"日志收集与处理\"></p>\n<ol start=\"5\">\n<li>等等</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cjoqjal5w0004i8uj1e3um93i","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cjoqjal5w0004i8uj1e3um93i","modified":0,"renderable":0},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC特点.png","slug":"gRPC特点.png","post":"cjoqjal5p0002i8uj7udvwhmi","modified":0,"renderable":0},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/gRPC调用示例.png","slug":"gRPC调用示例.png","post":"cjoqjal5p0002i8uj7udvwhmi","modified":0,"renderable":0},{"_id":"source/_posts/基于Golang的gRPC使用笔记1/rpc原理图.png","slug":"rpc原理图.png","post":"cjoqjal5p0002i8uj7udvwhmi","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","slug":"Demo.png","post":"cjoqjal5w0004i8uj1e3um93i","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/日志收集与处理.png","slug":"日志收集与处理.png","post":"cjoqjar06000ci8ujeqo2ta9z","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/异步处理.png","slug":"异步处理.png","post":"cjoqjar06000ci8ujeqo2ta9z","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/系统解耦.png","slug":"系统解耦.png","post":"cjoqjar06000ci8ujeqo2ta9z","modified":0,"renderable":0},{"_id":"source/_posts/RabbitMQ学习-1-概念与认识/秒杀抢购.png","slug":"秒杀抢购.png","post":"cjoqjar06000ci8ujeqo2ta9z","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjoqjal5p0002i8uj7udvwhmi","tag_id":"cjoqjal600005i8uj7l2zq098","_id":"cjoqjal660009i8ujehqe1mt1"},{"post_id":"cjoqjal5p0002i8uj7udvwhmi","tag_id":"cjoqjal640007i8ujqbzd98ya","_id":"cjoqjal66000ai8uj42d0zqbd"},{"post_id":"cjoqjal5w0004i8uj1e3um93i","tag_id":"cjoqjal650008i8ujnsdiw33y","_id":"cjoqjal67000bi8ujurkh6wq4"},{"post_id":"cjoqjar06000ci8ujeqo2ta9z","tag_id":"cjoqjar0b000di8uj8mdf6zpa","_id":"cjoqjar0d000ei8ujrjm1zfoh"}],"Tag":[{"name":"gRPC","_id":"cjoqjal600005i8uj7l2zq098"},{"name":"golang","_id":"cjoqjal640007i8ujqbzd98ya"},{"name":"Hexo","_id":"cjoqjal650008i8ujnsdiw33y"},{"name":"RabbitMQ 消息队列","_id":"cjoqjar0b000di8uj8mdf6zpa"}]}}